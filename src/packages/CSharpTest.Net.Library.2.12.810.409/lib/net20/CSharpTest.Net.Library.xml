<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpTest.Net.Library</name>
    </assembly>
    <members>
        <member name="T:CSharpTest.Net.Utils.ArgumentList">
            <summary>
            This is a private class as the means of sharing is to simply include the source file not
            reference a library.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ArgumentList class using the argument list provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.#ctor(System.StringComparer,System.String[])">
            <summary>
            Initializes a new instance of the ArgumentList class using the argument list provided
            and using the string comparer provided, by default this is case-insensitive
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.AddRange(System.String[])">
            <summary>
            Parses the strings provided for switch names and optionally values, by default in one
            of the following forms: "/name=value", "/name:value", "-name=value", "-name:value"
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Add(System.String,System.String)">
            <summary>
            Adds a name/value pair to the collection of arguments, if value is null the name is
            added with no values.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryGetValue(System.String,CSharpTest.Net.Utils.ArgumentList.Item@)">
            <summary>
            Returns true if the value was found by that name and set the output value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryGetValue(System.String,System.String@)">
            <summary>
            Returns true if the value was found by that name and set the output value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.SafeGet(System.String)">
            <summary>
            Returns an Item of name even if it does not exist
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.TryParseNameValue(System.String,System.String@,System.String@)">
            <summary>
            Attempts to parse a name value pair from '/name=value' format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Remove(System.String[]@,System.String,System.String@)">
            <summary>
            Searches the arguments until it finds a switch or value by the name in find and
            if found it will:
            A) Remove the item from the arguments
            B) Set the out parameter value to any value found, or null if just '/name'
            C) Returns true that it was found and removed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.GetKeyForItem(CSharpTest.Net.Utils.ArgumentList.Item)">
            <summary>
            Abract override for extracting key
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Parse(System.String)">
            <summary> Parses the individual arguments from the given input string. </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Join(System.String[])">
            <summary> The inverse of Parse, joins the arguments together and properly escapes output </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.DefaultComparison">
            <summary>
            Controls the default string comparer used for this class
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.PrefixChars">
            <summary>
            Controls the allowable prefix characters that will preceed named arguments
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.NameDelimeters">
            <summary>
            Controls the allowable delimeter characters seperate argument names from values
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Unnamed">
            <summary>
            Returns a list of arguments that did not start with a character in the PrefixChars
            static collection.  These arguments can be modified by the methods on the returned
            collection, or you set this property to a new collection (a copy is made).
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Keys">
            <summary>
            A string collection of all keys in the arguments
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ArgumentList.Item">
            <summary>
            This is a single named argument within an argument list collection, this
            can be implicitly assigned to a string, or a string[] array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.#ctor(System.String,System.String[])">
            <summary>
            Constructs an item for the name and values provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.ToArray">
            <summary>
            Same as the .Values property, returns the collection of items in this named slot
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add one or more values to this named item
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.Collections.Generic.KeyValuePair{System.String,System.String[]}">
            <summary>
            Converts this item to key-value pair to rem to a dictionary
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.String">
            <summary>
            Converts this item to a string by getting the first value or null if none
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ArgumentList.Item.op_Implicit(CSharpTest.Net.Utils.ArgumentList.Item)~System.String[]">
            <summary>
            Converts this item to array of strings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Name">
            <summary>
            Returns the name of this item
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Value">
            <summary>
            Returns the first value of this named item or null if one doesn't exist
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.ArgumentList.Item.Values">
            <summary>
            Returns the collection of items in this named slot
            </summary>
        </member>
        <member name="T:Check">
            <summary>
            provides a set of runtime validations for inputs
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception and throws.
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.Assert(System.Boolean,Check.ExceptionBuilder)">
            <summary>
            Verifies that the condition is true and if it fails throws the execption returned
            by fnExceptionBuilder()
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.NotNull``1(``0)">
            <summary>
            Verifies that value is not null and returns the value or throws ArgumentNullException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.String)">
            <summary>
            Verfies that the string is not null and not empty and returns the string.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.Guid)">
            <summary>
            Verfies that the Guid is not empty.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty``1(``0)">
            <summary>
            Verfies that the collection is not null and not empty and returns the collection.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.NotEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are NOT the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.ArraySize``1(``0[],System.Int32,System.Int32)">
            <summary>
            Verifies that the array is not empty and has at least min, but not more than max items.
            throws ArgumentNullExcpetion
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.InRange``1(``0,``0,``0)">
            <summary>
            Verifies that the value is min, max, or between the two.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsAssignable``1(System.Object)">
            <summary>
            Returns (T)value if the object provided can be assinged to a variable of type T
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Object)">
            <summary>
            Returns value if the object provided can be assinged to a variable of type toType
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Type)">
            <summary>
            Throws ArgumentException if the type fromType cannot be assigned to variable of type toType
            </summary>
        </member>
        <member name="T:Check.ExceptionBuilder">
            <summary>
            Used to delay creation of the excpetion until the condition fails.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.XmlConfiguration`1">
            <summary>
            This is basically a big hack on the whole configuration system, it's purpose is to avoid
            the entire thing.  Where argument T is any [XmlSerializable] object this class can deserialize
            it from the configuration file.  It looks for an xsd either embeded into typeof(T).Assembly or
            in the local filesystem.  The Xsd must be named typeof(T).FullName + ".xsd" to be found by this
            class.  If found validation will occur durring the deserialization process and an exception of
            type XmlException() will be raised on errors.  Optionally, you can directly set the schema via
            the static XmlSchema property.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.XmlConfiguration`1.XmlSchema">
            <summary>
            Allows explicit setting of the XmlSchema to use when validating the xml input.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.#ctor">
            <summary>
            Constructs the XmlConfiguration element assuming that the derived type name
            is the same name as the xsd file name, i.e. "MyCfg : XmlConfiguration" would
            expect an XSD named "MyCfg.xsd" to either exist on disk or be embeded into
            the type's containing assembly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.#ctor(System.String)">
            <summary>
            Explicitly sets the xsd file name to use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadComplete(`0)">
            <summary>
            Provides a derived class with the ability to do post-read validation not represented in
            the xsd (or in place of an xsd).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            The main work goes here, builds the reader and validator and deserializes the object.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadConfig(System.String)">
            <summary>
            Reads and extracts the configuration settings from the current application's configuraiton file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize the xml configuration directly from an XmlReader instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.ReadXml(System.String,System.Xml.XmlReader)">
            <summary>
            Deserialize the xml configuration directly from an XmlReader instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.XmlConfiguration`1.op_Implicit(CSharpTest.Net.Utils.XmlConfiguration{`0})~`0">
            <summary>
            Allows implicit casting of the configuration element to the actual type contained.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.XmlConfiguration`1.Settings">
            <summary>
            Allows access to the deserialized data
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileList">
            <summary>
            A utility class for gathering files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor">
            <summary>
            Creates an empty FileList
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.String[])">
            <summary>
            Constructs a FileList containing the files specified or found within the directories
            specified.  See Add(string) for more details.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.IO.FileAttributes,System.String[])">
            <summary>
            Constructs a FileList containing the files specified or found within the directories
            specified.  See Add(string) for more details.  Files and directories that contain the 
            attribtes defined in prohibitedAttributes will be ignored, use '0' for everything.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.#ctor(System.IO.FileInfo[])">
            <summary>
            Creates a list containing the specified FileInfo records.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Add(System.String[])">
            <summary>
            Adds a set of items to the collection, see Add(string) for details.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Add(System.String)">
            <summary>
            Adds the specified file to the collection.  If the item specified is a directory
            that directory will be crawled for files, and optionally (RecurseFolders) child
            directories.  If the name part of the path contains wild-cards they will be
            considered throughout the folder tree, i.e: C:\Temp\*.tmp will yeild all files
            having an extension of .tmp.  Again if RecurseFolders is true you will get all
            .tmp files anywhere in the C:\Temp folder.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Contains(System.IO.FileInfo)">
            <summary>
            Returns true if the given file is in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.AddRange(System.IO.FileInfo[])">
            <summary>
            Adds one or files to the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.Remove(System.IO.FileInfo[])">
            <summary>
            Remove the files specified if they exist in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.ToArray">
            <summary>
            Returns the collection of FileInfo as an array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.GetFileNames">
            <summary>
            Converts all FileInfo elements into their fully-qualified file names
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.GetKeyForItem(System.IO.FileInfo)">
            <summary>
            The key for the specified element.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.RecurseFolders">
            <summary>
            Gets or sets a value that allows traversal of all directories added.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.IgnoreFolderAttributes">
            <summary>
            Setting this will greatly improve performance at the cost of not evaluating filters on directories
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.FileList.ProhibitedAttributes">
            <summary>
            Set this to the set of attributes that if a directory or file contains should be skipped. For
            example when set to FileAttributes.Hidden, hidden files and folders will be ignored.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Utils.FileList.FileFound">
            <summary>
            Raised when a new file is about to be added to the collection, set e.Ignore
            to true will cancel the addition of this file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileList.FileFoundEventArgs">
            <summary>
            Event args passed to the FileFound event
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.Ignore">
            <summary>
            Allows manually filtering a file by setting Ignore=true;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.File">
            <summary>
            Provides access to the FileInfo of this item
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileList.FileFoundEventArgs.#ctor(System.Boolean,System.IO.FileInfo)">
            <summary>
            Constructs the event args
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ProcessInfo">
            <summary>
            Utility class for obtaining information about the currently running
            process and AppDomain
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.UNKNOWN">
            <summary> Returns the string '[Unknown]'</summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessId">
            <summary> Returns the current process id </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessName">
            <summary> Returns the current process name without an extension </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProcessFile">
            <summary> Returns the file path to the exe for this process </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.AppDomainName">
            <summary> Returns the current AppDomain's friendly name </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.EntryAssembly">
            <summary> Returns the entry-point assembly or the highest stack assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProductVersion">
            <summary> Returns the product version of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ProductName">
            <summary> Returns the product name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.CompanyName">
            <summary> Returns the company name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.IsDebugging">
            <summary> Returns true if a debugger is attached to the process </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.RegistrySoftwarePath">
            <summary>
            Returns the HKCU or HKLM path for this software application based
            on the process that is running: Software\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.ApplicationData">
            <summary>
            Returns the roaming user profile path for the currently running software
            application: {SpecialFolder.ApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.LocalApplicationData">
            <summary>
            Returns the non-roaming user profile path for the currently running software
            application: {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.ProcessInfo.DefaultLogFile">
            <summary>
            Returns a default log file name derived as:
            {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}\{AppDomainName}.txt
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ProcessInfo.#ctor">
            <summary>
            This is some ugly code, the intent is to be able to answer the above questions in 
            a wide array of environments.  I admit now this may fail eventually.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ProcessInfo.SafeName(System.String)">
            <summary>
            Copy from StringUtils
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSection">
            <summary>
            Provides a store for user settings in the same format as appSettings
            </summary>
        </member>
        <member name="F:CSharpTest.Net.AppConfig.UserSettingsSection.SECTION_NAME">
            <summary>
            The name of the user section: userSettings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradeUserSettings(System.Configuration.Configuration,CSharpTest.Net.AppConfig.UserSettingsSection)">
            <summary>
            Searches for old user settings from previous versions and copies them into the
            configuration provided.
            </summary>
            <param name="config">The configuration to inspect for previous versions</param>
            <param name="settings">The destination UserSettingsSection object</param>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradeSettingsFromFile(System.Configuration.Configuration,CSharpTest.Net.AppConfig.UserSettingsSection,System.String,System.String,System.String)">
            <summary>
            Forces a read of the configuration file specified and copies the settings from
            the old file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.UserSettingsFrom(System.Configuration.Configuration)">
            <summary>
            Retrieves the current UserSettingsSection from the specified configuration, if none
            exists a new one is created.  If a previous version of the userSettings exists they
            will be copied to the UserSettingsSection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Overloaded to ignore namespace declaration and useage so that we can identify the XSD
            file that should be used.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.PreSerialize(System.Xml.XmlWriter)">
            <summary>
            Overloaded to insert namespace declaration of xml schema and include our own schema file
            aut0magically.  This is a development aid that is not enforced durring read of the xml.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.OriginalVersion">
            <summary>
            Describes the version of the application that originally wrote the configuration
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradedVersion">
            <summary>
            The version that the user settings were previously updagraded from
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UpgradedDate">
            <summary>
            The last date/time the settings were upgraded from the upgradedVersion
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.DefaultSettings">
            <summary>
            if available, returns the default userSettings from the app's configuration file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.UserSettings">
            <summary>
            Retrieves the current UserSettingsSection from the default configuration
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Settings">
            <summary>
            Retrieves the collection of key/value settings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Sections">
            <summary>
            Retrieves a collection of named sections within the userSettings container
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSection.Item(System.String)">
            <summary>
            Gets or sets a key/value pair in the collection of settings
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSubSection">
            <summary>
            Provides a store for user settings in the same format as appSettings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSection.CompareTo(CSharpTest.Net.AppConfig.UserSettingsSubSection)">
            <summary>
            Provides key comparison between two sections
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSubSection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Name">
            <summary>
            Returns the key name of the section within the userSettings collection
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Settings">
            <summary>
            Retrieves the collection of key/value settings
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSection.Item(System.String)">
            <summary>
            Gets or sets a key/value pair in the collection of settings
            </summary>
        </member>
        <member name="T:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection">
            <summary>
            Provides a collection of name keyed sections that contain more key/value settings
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.#ctor">
            <summary>
            Constructs a collection of named sections
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CreateNewElement">
            <summary> creates a new UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CreateNewElement(System.String)">
            <summary> creates a new UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> Returns the name of the UserSettingsSubSection </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Add(System.String)">
            <summary>
            Adds a new section with the specified name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Remove(System.String)">
            <summary>
            Removes the specified collection by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Clear">
            <summary>
            Clears all elements from the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CopyFrom(CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection)">
            <summary>
            Deep copy of all settings from one configuration to another.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.CollectionType">
            <summary>
            Gets the type of the System.Configuration.ConfigurationElementCollection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.AppConfig.UserSettingsSubSectionCollection.Item(System.String)">
            <summary>
            Returns the specified collection by name if it exists, or null if not found
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Comparable`1">
            <summary> Provides a base-class for non-reference comparison of objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1">
            <summary> Provides a base-class for non-reference equality objects </summary>
        </member>
        <member name="F:CSharpTest.Net.Bases.Equatable`1.Comparer">
            <summary> return a non-reference equality comparer for this class </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode(`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Equality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Inequality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="P:CSharpTest.Net.Bases.Equatable`1.HashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.GetHashCode(`0)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="F:CSharpTest.Net.Bases.Comparable`1.Comparer">
            <summary> returns a non-reference comparer for this class </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.Equals(`0)">
            <summary> Returns true if the object is equal </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.CompareTo(`0)">
            <summary> Compares with another object of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_LessThan(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_LessThanOrEqual(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_GreaterThan(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.op_GreaterThanOrEqual(CSharpTest.Net.Bases.Comparable{`0},CSharpTest.Net.Bases.Comparable{`0})">
            <summary> Compares two objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Comparable`1.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.GetHashCode(`0)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Comparable`1.EqualityComparer.Compare(`0,`0)">
            <summary> Returns the comparison between the two objects </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Disposable">
            <summary>
            Wraps the IDisposable object interface for classes that desire to be sure of being called 
            a single time for the dispose.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.#ctor">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Finalize">
            <summary> last-chance dispose </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose">
            <summary> disposes of the object if it has not already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Assert">
            <summary> Raises the ObjectDisposedException if this object has already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose(System.Boolean)">
            <summary> Your implementation of the dispose method </summary>
        </member>
        <member name="E:CSharpTest.Net.Bases.Disposable.Disposed">
            <summary> Raised when the object is disposed </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BTreeDictionary`2">
            <summary>
            Implements an IDictionary interface for an in-memory B+Tree
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IDictionaryEx`2">
            <summary>
            Extends the IDictionary interface to encompass the TryXxxx operations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="F:CSharpTest.Net.Collections.BTreeDictionary`2.DefaultOrder">
            <summary>The default `order` of the B+Tree structure.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The Collection is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds a set of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="items">The items to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific key and value pair.
            </summary>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. 
            This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.ToArray">
            <summary>
            Returns all the items of this collection as an array of  <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.First">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetFirst(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Last">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetLast(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.EnumerateFrom(`0)">
            <summary>
            Inclusivly enumerates from start key to the end of the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.EnumerateRange(`0,`0)">
            <summary>
            Inclusivly enumerates from start key to stop key
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Clone">
            <summary>
            Returns a writable clone of this collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.MakeReadOnly">
            <summary>
            Returns a read-only clone of this collection.  If this instance is already read-only the method will return this.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Comparer">
            <summary>
            Gets the Comparer provided to the constructor or Comparer&lt;TKey>.Default if it was not provided.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BTreeList`1">
            <summary>
            Implements an IList interface for an in-memory B+Tree of unique values
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BTreeList`1.DefaultOrder">
            <summary>The default `order` of the B+Tree structure.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The Collection is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Add(`0)">
            <summary>
            Adds an element with the provided value to the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same value already exists in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a set of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="items">The items to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same value already exists in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value pair.
            </summary>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Remove(`0)">
            <summary>
            Removes the element with the specified value from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="value"/> was not found in the original <see cref="T:System.Collections.Generic.IList`1"/>.
            </returns>
            <param name="value">The value of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.TryAddItem(`0)">
            <summary>
            Adds an element with the provided value to the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.ToArray">
            <summary>
            Returns all the items of this collection as an array of  <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.EnumerateFrom(`0)">
            <summary>
            Inclusivly enumerates from start value to the end of the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.EnumerateRange(`0,`0)">
            <summary>
            Inclusivly enumerates from start value to stop value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Clone">
            <summary>
            Returns a writable clone of this collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.MakeReadOnly">
            <summary>
            Returns a read-only clone of this collection.  If this instance is already read-only the method will return this.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.Comparer">
            <summary>
            Gets the Comparer provided to the constructor or Comparer&lt;TKey>.Default if it was not provided.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValueUpdate`2">
            <summary> Provides a delegate that performs an atomic update of a key/value pair </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValuePredicate`2">
            <summary> Provides a delegate that performs a test on key/value pair </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ICreateValue`2">
            <summary>
            An interface to provide conditional or custom creation logic to a concurrent dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ICreateValue`2.CreateValue(`0,`1@)">
            <summary>
            Called when the key was not found within the dictionary to produce a new value that can be added.
            Return true to continue with the insertion, or false to prevent the key/value from being inserted.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IUpdateValue`2">
            <summary>
            An interface to provide conditional or custom update logic to a concurrent dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IUpdateValue`2.UpdateValue(`0,`1@)">
            <summary>
            Called when the key was found within the dictionary to produce a modified value to update the item
            to. Return true to continue with the update, or false to prevent the key/value from being updated.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2">
            <summary>
            An interface to provide conditional or custom creation or update logic to a concurrent dictionary.
            </summary>
            <remarks>
            Generally implemented as a struct and passed by ref to save stack space and to retrieve the values
            that where inserted or updated.
            </remarks>
        </member>
        <member name="T:CSharpTest.Net.Collections.IRemoveValue`2">
            <summary>
            An interface to provide conditional removal of an item from a concurrent dictionary.
            </summary>
            <remarks>
            Generally implemented as a struct and passed by ref to save stack space and to retrieve the values
            that where inserted or updated.
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.IRemoveValue`2.RemoveValue(`0,`1)">
            <summary>
            Called when the dictionary is about to remove the key/value pair provided, return true to allow
            it's removal, or false to prevent it from being removed.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IConcurrentDictionary`2">
            <summary>
            Extends the IDictionaryEx interface to encompass concurrent/atomic operations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.GetOrAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="fnCreate">Constructs a new value for the key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate(`0,`1,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate(`0,System.Converter{`0,`1},CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
            <remarks>
            Adds or modifies an element with the provided key and value.  If the key does not exist in the collection,
            the factory method fnCreate will be called to produce the new value, if the key exists, the converter method
            fnUpdate will be called to create an updated value.
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate``1(`0,``0@)">
            <summary>
            Add, update, or fetche a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            by calling the provided factory method to construct the value if the key is not already present in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryUpdate(`0,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Modify the value associated with the result of the provided update method
            as an atomic operation, Allows for reading/writing a single record within
            the tree lock.  Be cautious about the behavior and performance of the code 
            provided as it can cause a dead-lock to occur.  If the method returns an
            instance who .Equals the original, no update is applied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryRemove(`0,CSharpTest.Net.Collections.KeyValuePredicate{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            if the fnCondition predicate is null or returns true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryRemove``1(`0,``0@)">
            <summary>
            Conditionally removes a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.IRemoveValue`2"/> interface.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValueComparer`2">
            <summary>
            Represents a key-value comparison
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.#ctor">
            <summary>
            Creates a key-value comparison using the default comparer for type TKey
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a key-value comparison with the specified comparer
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.KeyValueComparer`2.Default">
            <summary>
            Represents a key-value comparison using the default comparer for type TKey
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.KeyValueComparer`2.Comparer">
            <summary>
            Returns the comparer being used by this instance
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.MergeSort">
            <summary>
            Provides a stable array sort based on merge-sort using O(n) additional memory.  As a release build,
            this routine will operate faster than Array.Sort when using a custom (non-default) comparison.  It
            also has the advantange of being stable, that is it preserves the order of elements that compare as
            being of equal value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[])">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],``0[]@,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
            <remarks> This overload also yields the working copy of the array which is unsorted. </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Comparison{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32,System.Comparison{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DuplicateHandling">
            <summary> Defines how duplicate keys are handled </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.None">
            <summary> Do nothing and pass-through all duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.FirstValueWins">
            <summary> Remove all but the first item of duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.LastValueWins">
            <summary> Remove all but the last item of duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.RaisesException">
            <summary> Throw an error on duplicates </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrderedEnumeration`1">
            <summary>
            Creates an ordered enumeration from an unordered enumeration by paginating the data, sorting the page,
            and then performing a binary-tree grouped mergesort on the resulting pages.  When the page size (memoryLimit)
            is hit, the page will be unloaded to disk and restored on demand if a serializer is provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},CSharpTest.Net.Serialization.ISerializer{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},CSharpTest.Net.Serialization.ISerializer{`0},System.Int32)">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">GetEnumerator() may only be called once.</exception>
            <exception cref="T:System.IO.InvalidDataException">Enumeration is out of sequence.</exception>
            <exception cref="T:System.ArgumentException">Duplicate item in enumeration.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Merges two ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the default comparer of T.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling,System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.WithDuplicateHandling(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling)">
            <summary>
            Wraps an existing enumeration of Key/value pairs with an assertion about ascending order and handling
            for duplicate keys.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.Comparer">
            <summary>
            Gets or sets the comparer to use when ordering the items.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.Serializer">
            <summary>
            Gets or sets the serializer to use when paging to disk.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.InMemoryLimit">
            <summary>
            Gets or sets the number of instances to keep in memory before sorting/paging to disk.
            </summary>
            <exception cref="T:System.InvalidOperationException">You must specify the Serializer before setting this property</exception>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.DuplicateHandling">
            <summary> Gets or sets the duplicate item handling policy </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrderedKeyValuePairs`2">
            <summary>
            Speicalizes the OrderedEnumeration of T to use key/value pairs with a key comparer.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32)">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1},System.Int32)">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.Merge(System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.SynchronizedDictionary`2">
            <summary>
            Represents a thread-safe generic collection of key/value pairs.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using exclusive locking.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using exclusive locking.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using the lock provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor(CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using the lock provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using the default locking
            type for exclusive access, akin to placing lock(this) around each call.  If you want to
            allow reader/writer locking provide one of those lock types from the Synchronization
            namespace.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.Dispose">
            <summary>
            Defines a method to release allocated resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.ReplaceStorage(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Locks the collection and replaces the underlying storage dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.GetOrAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="fnCreate">Constructs a new value for the key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            by calling the provided factory method to construct the value if the key is not already present in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.AddOrUpdate(`0,`1,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.AddOrUpdate(`0,System.Converter{`0,`1},CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.AddOrUpdate``1(`0,``0@)">
            <summary>
            Add, update, or fetche a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryUpdate(`0,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Modify the value associated with the result of the provided update method
            as an atomic operation, Allows for reading/writing a single record within
            the tree lock.  Be cautious about the behavior and performance of the code 
            provided as it can cause a dead-lock to occur.  If the method returns an
            instance who .Equals the original, no update is applied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryRemove(`0,CSharpTest.Net.Collections.KeyValuePredicate{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            if the fnCondition predicate is null or returns true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedDictionary`2.TryRemove``1(`0,``0@)">
            <summary>
            Conditionally removes a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.IRemoveValue`2"/> interface.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.Lock">
            <summary> Exposes the interal lock so that you can syncronize several calls </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.SynchronizedList`1">
            <summary>
            Represents a collection of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.#ctor">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using exclusive locking.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.#ctor(CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs a thread-safe generic collection of key/value pairs using the lock provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a thread-safe generic collection of T, wrapped around the instance in storage
            using the default locking type for exclusive access, akin to placing lock(this) around 
            each call.  If you want to allow reader/writer locking provide one of those lock types 
            from the Synchronization namespace.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.#ctor(System.Collections.Generic.IList{`0},CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs a thread-safe generic collection of T, wrapped around the instance in storage
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Dispose">
            <summary>
            Defines a method to release allocated resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.ReplaceStorage(System.Collections.Generic.IList{`0})">
            <summary>
            Locks the collection and replaces the underlying storage dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Added the public version to return the ordinal since you cannot depend upon the collection being 
            unmodified to determine the index either before or after the Add() call.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IList`1"/> contains the element specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SynchronizedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedList`1.Lock">
            <summary> Exposes the interal lock so that you can syncronize several calls </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SynchronizedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer">
            <summary>
            SecureTransfer is a static class that contains two user types, Sender and Receiver.  Each provide 
            one-half of a secure file transfer protocol.  The security is based on pre-shared public keys used
            to sign all messages between the client and server.  Additionally these keys are used durring the
            session negotiation to exchange a 256-bit session key.  The session key is combined with a random
            salt for each message to produce an AES-256 cryptographic key.  The file content is then tranfered
            with this session key.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.BeginTransferEventArgs">
            <summary> Event args that provides details about the start of a transfer </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.BeginTransferEventArgs.TransferId">
            <summary> The client-provided unique identifier for this transfer </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.BeginTransferEventArgs.Location">
            <summary> The client-provided name of the transfer </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.BeginTransferEventArgs.TotalSize">
            <summary> The full length of the file being transferred </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.BytesReceivedEventArgs">
            <summary> Event args that provides details about the contents of a transfer </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.BytesReceivedEventArgs.WriteOffset">
            <summary> The offset at which BytesReceived should be written </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.BytesReceivedEventArgs.BytesReceived">
            <summary> The bytes that should be written at WriteOffset </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.CompleteTransferEventArgs">
            <summary> Event args that provides details about the completion of a transfer </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.CompleteTransferEventArgs.ContentHash">
            <summary> The SHA-256 hash of the entire content file transferred </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.DownloadBytesEventArgs">
            <summary> Event args that provides details about the contents of a transfer </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.DownloadBytesEventArgs.SetBytes(System.Int64,System.Byte[])">
            <summary>
            Returns the number of bytes specified in ReadLenght from the offset of ReadOffset
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.DownloadBytesEventArgs.ReadOffset">
            <summary> The offset at which the bytes should be read </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.DownloadBytesEventArgs.ReadLength">
            <summary> The number of bytes to read </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.Server">
            <summary>
            Provides a file transfer handler for the server-side (receiver) of file transfers. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.#ctor(CSharpTest.Net.Crypto.RSAPrivateKey,CSharpTest.Net.Crypto.RSAPublicKey,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Constructs/reconstructs the server-side receiver to process one or more messages.  This class 
            maintains all state in the INameValueStore so it may be destroyed between requests, or there 
            may be multiple instances handling requests, provided that all instances have access to the
            underlying storage provided by the INameValueStore instance.
            </summary>
            <param name="privateKey">The private key used for this server</param>
            <param name="clientKey">The public key of the client to allow</param>
            <param name="storage">The state storage used between requests</param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.HasState(System.Guid,System.String)">
            <summary> returns true if the value exists </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.ReadState(System.Guid,System.String)">
            <summary> returns the value identified </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.WriteState(System.Guid,System.String,System.String)">
            <summary> stores the value identified </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.DeleteState(System.Guid,System.String)">
            <summary> removes the value identified </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.Delete(System.Guid)">
            <summary> removes all values for a give transfer </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Server.Receive(System.IO.Stream)">
            <summary>
            Processes an inbound message and returns the result
            </summary>
            <exception cref="T:System.IO.InvalidDataException">Raised for any internal error</exception>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.Server.KeyBytes">
            <summary>
            The amount of random data returned from the server to generate a session key
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.Server.NonceSize">
            <summary> The number of random bytes to use for a nonce </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.Server.MaxInboundFileChunk">
            <summary> 
            The maximum number of bytes from the file to send, the actual message size will be longer by 
            100 or so bytes + SHA256 signature length (privateKey.ExportParameters().Modulus.Length).
            To be certain a client does not exceed a specific size, allow for an addition 2500 bytes.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.Server.MaxOutboundFileChunk">
            <summary> 
            The maximum number of bytes from the file to send, the actual message size will be longer by 
            100 or so bytes + SHA256 signature length (privateKey.ExportParameters().Modulus.Length).
            To be certain a client does not exceed a specific size, allow for an addition 2500 bytes.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Server.ErrorRaised">
            <summary>Raised when an error occurs</summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Server.BeginTransfer">
            <summary>Raised when a transfer begins</summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Server.BytesReceived">
            <summary>Raised when bytes are received</summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Server.CompleteTransfer">
            <summary>Raised when a transfer completes</summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Server.DownloadBytes">
            <summary>Raised durring a download request</summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.Client">
            <summary>
            Provides a file transfer handler for the client-side of file transfers. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.#ctor(CSharpTest.Net.Crypto.RSAPrivateKey,CSharpTest.Net.Crypto.RSAPublicKey,CSharpTest.Net.Crypto.SecureTransfer.Client.TransmitMessageAction)">
            <summary>
            Constructed to send one or more files to a remove server identified by serverKey.  The transfer
            is a blocking call and returns on success or raises an exception.  If Abort() is called durring
            the transfer, or if a ProgressChanged event handler raises the OperationCanceledException, the
            transfer is silently terminated.
            </summary>
            <param name="privateKey">The private key for this client</param>
            <param name="serverKey">The public key of the server</param>
            <param name="sendMessage">A delegate to transfer data to the server and obtain a response</param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.Abort">
            <summary> Aborts the transfer </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.Upload(System.String,System.String)">
            <summary>
            Called to send a single file to the remove server identified by serverKey.  The transfer
            is a blocking call and returns on success or raises an exception.  If Abort() is called durring
            the transfer, or if a ProgressChanged event handler raises the OperationCanceledException, the
            transfer is silently terminated and the method will return false.
            </summary>
            <param name="location">A string of up to 1024 bytes in length</param>
            <param name="filePath">The file path of the file to transfer</param>
            <returns>True if the file was successfully received by the server</returns>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.Upload(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Called to send a specific length of bytes to a server identified by serverKey.  The transfer
            is a blocking call and returns on success or raises an exception.  If Abort() is called durring
            the transfer, or if a ProgressChanged event handler raises the OperationCanceledException, the
            transfer is silently terminated and the method will return false.
            </summary>
            <param name="location">A string of up to 1024 bytes in length</param>
            <param name="length">The length in bytes to send from the stream</param>
            <param name="rawInput">The stream to read the data from</param>
            <returns>True if the file was successfully received by the server</returns>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.Download(System.String,System.IO.Stream)">
            <summary>
            Called to send a specific length of bytes to a server identified by serverKey.  The transfer
            is a blocking call and returns on success or raises an exception.  If Abort() is called durring
            the transfer, or if a ProgressChanged event handler raises the OperationCanceledException, the
            transfer is silently terminated and the method will return false.
            </summary>
            <param name="location">A string of up to 1024 bytes in length</param>
            <param name="output">Any writable stream that can seek</param>
            <returns>True if the file was successfully received by the server</returns>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureTransfer.Client.Download(System.String,System.String)">
            <summary>
            Called to send a specific length of bytes to a server identified by serverKey.  The transfer
            is a blocking call and returns on success or raises an exception.  If Abort() is called durring
            the transfer, or if a ProgressChanged event handler raises the OperationCanceledException, the
            transfer is silently terminated and the method will return false.
            </summary>
            <param name="location">A string of up to 1024 bytes in length</param>
            <param name="filename">The name of the file to write to</param>
            <returns>True if the file was successfully received by the server</returns>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SecureTransfer.Client.LimitThreads">
            <summary> The maximum number of concurrent calls to the server </summary>
        </member>
        <member name="E:CSharpTest.Net.Crypto.SecureTransfer.Client.ProgressChanged">
            <summary>
            Raised after each block of data is transferred to the server.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureTransfer.Client.TransmitMessageAction">
            <summary>
            Provides the transmission of a stream of bytes to the server/receiver and returns the result stream
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.IFactory`1">
            <summary> Generic factory for instances of type T </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.IFactory`1.Create">
            <summary> Creates an instance of an object assignable to type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.MemberwiseClone">
            <summary>
            Provides a deep-copy, field-level duplication of any object
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.ObjectCloner">
            <summary>
            A class that performs duplication of an entire object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.#ctor">
            <summary>
            Creates the cloner
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Dispose">
            <summary>
            Disposes of the instance and it's references to objects that have been duplicated
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Clear">
            <summary>
            Removes all instances from the object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.Clone``1(``0)">
            <summary>
            Public entry point to begin duplication of the object graph.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.CloneObject``1(``0)">
            <summary>
            Internal duplicate an object graph
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ObjectCloner.CloneDefault(System.Object)">
            <summary>
            Provides the default behavior for duplicating an object and recording the
            duplication into the graph.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Cloning.ObjectCloner.Graph">
            <summary>
            Add or Remove instances from the object graph, by adding this.Graph[o] = o; the instance 'o' will 
            not be duplicated.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.MemberwiseClone.#ctor">
            <summary>
            Provides a deep-copy, field-level duplication of any object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.MemberwiseClone.CloneDefault(System.Object)">
            <summary>
            Routine to clone an objects fields and their contents
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.ReferenceEqualityComparer">
            <summary>
            Dictionary comparer for comparing objects by reference reguardless of having
            the GetHashCode / Equals override implemented on an object.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <summary>
            Returns true if the two objects are the same instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.ReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{System#Object}#GetHashCode(System.Object)">
            <summary>
            Returns a hash code the instance of the object
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Cloning.SerializerClone">
            <summary>
            Used to duplicate objects either by the ISerializable interface or by field-level duplication.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.#ctor">
            <summary>
            Used to duplicate objects either by the ISerializable interface or by field-level duplication.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.Clone``1(``0)">
            <summary>
            Public entry point to begin duplication of the object graph.  If your using this instance multiple
            times you should call Clear() between the object graphs or the copies previously made will be used.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Cloning.SerializerClone.CloneDefault(System.Object)">
            <summary>
            If the object provided is [Serializable] a simulated serialization routine is used to duplicate 
            the object, if it's not serializable then the MemberwiseClone base class will perform the copy.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList`1">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.Dispose">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode`1">
            <summary>
            A typed node, used similiarly to LinkedListNode&lt;T>.  Can belong to single list
            at a time, the type of list is usually LListNode&lt;T>.LList
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode">
            <summary>
            The basic Linked-list node, untyped, use LListNode&lt;T> for strong typed nodes and lists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.#ctor">
            <summary> 
            You may derive an instance class from LListNode and use it in a single list, or you
            may construct a node&lt;T> with the value that the node should contain.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.Previous">
            <summary> Returns the previous item in the list or null </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.Next">
            <summary> Returns the next item in the list or null </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode.LList">
            <summary> Provides a linked list of nodes of type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode.LList`1">
            <summary> Provides a linked list of nodes of type T </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.LList`1.AddFirst(`0)">
            <summary> Adds the node to the front of the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.LList`1.AddLast(`0)">
            <summary> Adds the node to the end of the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.LList`1.Remove(`0)">
            <summary> Remvoes the node from the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.LList`1.Clear">
            <summary> Remvoes all the nodes from the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.LList`1.GetEnumerator">
            <summary> Returns an enumerator that iterates through the collection. </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.LList`1.Count">
            <summary> Returns the number of items in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.LList`1.IsEmpty">
            <summary> Returns true if the list is empty </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.LList`1.First">
            <summary> Returns the first node in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.LList`1.Last">
            <summary> Returns the last node in the list </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode.Enumerator`2">
            <summary> Provides a enumeration of the list where it is acceptable to remove current </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.Enumerator`2.#ctor(`0)">
            <summary> Creates the enumeration on a list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.Enumerator`2.Dispose">
            <summary> Disposes of the enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.Enumerator`2.MoveNext">
            <summary> Moves to the next element or returns false </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode.Enumerator`2.Reset">
            <summary> Resets the enumeration back to the beginning of the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode.Enumerator`2.Current">
            <summary> Returns the current node </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode`1.#ctor">
            <summary> Constructs a node without a value </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode`1.#ctor(`0)">
            <summary> Constructs a node with a value </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.LListNode`1.Value">
            <summary> Gets/Sets the value of this node </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode`1.Previous">
            <summary> Returns the previous item in the list or null </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LListNode`1.Next">
            <summary> Returns the next item in the list or null </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LListNode`1.LList">
            <summary> Provides a linked list of nodes of type T </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode`1.LList.AddFirst(`0)">
            <summary> Adds the node to the front of the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LListNode`1.LList.AddLast(`0)">
            <summary> Adds the node to the end of the list </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AsymmetricKey">
            <summary>
            Provides the ability to encrypt and decrypt block-transform data
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.CryptoKey">
            <summary>
            Base class for encryption/decryption classes
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.IEncryptDecrypt">
            <summary>
            A simple interface for encrypting and decrypting strings, obtain an instance through the
            static Encryption inteface calss.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.IO.Stream)">
            <summary>Encrypts a stream of data</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.IO.Stream)">
            <summary> Decrypts a stream of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.String)">
            <summary>Encrypts a string and encodes the result in base-64 encoded text</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Encrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>Encrypts a string and encodes the result in specified encoding format</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.String)">
            <summary>Decrypts a string from base-64 encoded text</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IEncryptDecrypt.Decrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>Decrypts a string from the specified encoding format</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.#ctor">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Finalize">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Assert``1(``0)">
            <summary> Throws ObjectDisposedException if the object has been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Dispose">
            <summary> Clears any secure memory associated with this object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Dispose(System.Boolean)">
            <summary> Clears any secure memory associated with this object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.String)">
            <summary>
            Encrypts the encoded text and returns the base-64 encoded result
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Encrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>
            Encrypts the encoded text and returns the base-64 encoded result
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.String)">
            <summary>
            Decrypts the base-64 encoded bytes, decrypts the data and returns the string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.Decrypt(System.String,CSharpTest.Net.Formatting.ByteEncoding)">
            <summary>
            Decrypts the base-64 encoded bytes, decrypts the data and returns the string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.CryptoKey.CryptographicException">
            <summary>
            Used to ensure generality in excpetions raised from cryptographic routines.
            </summary>
            <example>catch { throw CryptographicException(); }</example>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.EncryptBlock(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.DecryptBlock(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Encrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsymmetricKey.Decrypt(System.IO.Stream)">
            <summary> Wraps the stream with a cryptographic stream </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AsymmetricKey.BlockSize">
            <summary> Provides the size, in bytes, of the maximum transform unit </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AsymmetricKey.TransformSize">
            <summary> Proivdes the output size, in bytes, assuming an input of BlockSize </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.HashStream">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.AggregateStream">
            <summary>
            Provides a base-class that aggregates another stream object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor">
            <summary> Creates the wrapper without an underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor(System.IO.Stream)">
            <summary> Creates the wrapper with the underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Dispose(System.Boolean)">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Close">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Stream">
            <summary> Allows modifying the underlying stream </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.#ctor(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary> Wraps an existing stream while computing a hash on all bytes read from/written to the stream</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.WriteByte(System.Byte)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position 
            within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.FinalizeHash">
            <summary>
            Can be called once, and only once, to obtain the hash generated while reading/writing.  After this is
            called the stream will reset the hash and start computing a new hash value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.Close">
            <summary> Represents a writtable stream for computing the hash value without retaining the data </summary>
            <returns> The hash code computed by the series of Write(...) calls </returns>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashStream.ChangeStream(System.IO.Stream)">
            <summary>
            Change the underlying stream that is being written to / read from without affecting the current hash
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.IPasswordDerivedBytes">
            <summary>
            Provides an interface for abstracting the password derivation routine used
            for password key derivation
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IPasswordDerivedBytes.GetBytes(System.Int32)">
            <summary>
                 Returns a pseudo-random key from a password, salt and iteration count.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.IPasswordDerivedBytes.Reset">
            <summary>
                 Resets the state of the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.IPasswordDerivedBytes.IterationCount">
            <summary>
                 Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.IPasswordDerivedBytes.Salt">
            
            <summary>
                 Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.LocalHostKey">
            <summary>
            Provides access to local machine and local user encryption via the ProtectedData class
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.WithSalt(CSharpTest.Net.Crypto.Salt)">
            <summary>
            Sets or changes the salt for this encryption key
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.LocalHostKey.CurrentUser">
            <summary>Encrypts data for the current user</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.LocalHostKey.LocalMachine">
            <summary>Encrypts data for the this machine</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.LocalHostKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.LocalHostKey.BlockSize">
            <summary> Block size </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.LocalHostKey.TransformSize">
            <summary> Output size </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.ModifiedRijndael">
            <summary>
            This class is provided to essentially unlock the Rijndael algorithm from the constraints imposed by the AES standards.
            The Rijndael algorithm here supports a wider length of key sizes and allows users to explicitly set the number of
            rounds.  This class is fully AES compliant when used with key sizes of 16, 24, or 32 bytes with rounds of 10, 12, and 
            14 respectivly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.#ctor">
            <summary>
            Creates a ModifiedRijndael which can be used with larger key sizes and a specified number of rounds.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.Create">
            <summary> return a new instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.Create(System.String)">
            <summary> return a new instance or throws ArugmentException </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.GenerateKey">
            <summary>
            When overridden in a derived class, generates a random key (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/>) to use for the algorithm.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.GenerateIV">
            <summary>
            When overridden in a derived class, generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to use for the algorithm.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric encryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.ModifiedRijndael.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric decryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.Rounds">
            <summary>
            Gets or sets the number of rounds the encryption algorithm will use when encrypting/decrypting data.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.MaxRounds">
            <summary>
            Returns the Maximum value for Rounds given the current BlockSize and KeySize values
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.ModifiedRijndael.NormalRounds">
            <summary>
            Returns the AES standard round numbers for keys of 128, 192, and 256 bit, or provides a 
            rough 1/3 of MaxRounds for other key sizes based on a constant block size of 128 bit.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PBKDF2">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the Rfc2898DeriveBytes implementation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.GetBytes(System.Int32)">
            <summary>
            Overloaded, The base implementation is broken for length > 20, further the RFC doesnt 
            support lenght > 20 and stipulates that the operation should fail.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#get_IterationCount">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#set_IterationCount(System.Int32)">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#get_Salt">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PBKDF2.CSharpTest#Net#Crypto#IPasswordDerivedBytes#set_Salt(System.Byte[])">
            <summary>
            Provided an implementation of Rfc2898DeriveBytes accessable via the IPasswordDerivedBytes
            interface.  One primary difference in GetBytes() ensures that the number of bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RSAPrivateKey">
            <summary>
            Provides a wrapper around encrypting/decrypting with public/private key pairs from Certificats or CSP
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RSAPublicKey">
            <summary>
            Provides a wrapper around encrypting with public keys from Certificats or CSP
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromParameters(System.Security.Cryptography.RSAParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromBytes(System.Byte[])">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromStore(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromStore(System.Security.Cryptography.CspParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromXml(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary> Create RSAPublicKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.Dispose(System.Boolean)">
            <summary> Clears the key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ExportParameters">
            <summary> Returns the public/private key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.FromXml(System.Xml.XmlReader)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToXml(System.Xml.XmlWriter)">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToXml">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.ToArray">
            <summary> Returns a CspBlob standard binary key definition </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.WriteToStore(System.String)">
            <summary>
            Writes a copy of this key into the local Csp store for the current user
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.WriteToStore(System.String,System.Security.Cryptography.CspProviderFlags)">
            <summary>
            Writes a copy of this key into the local Csp store with the given options
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.DeleteFromStore">
            <summary>
            Removes the key from the Csp store if it was fetch with RSAPublicKey.FromStore(...)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPublicKey.VerifyHash(System.Byte[],CSharpTest.Net.Crypto.Hash)">
            <summary>
            Signs the provided Hash code with the private key and returns the hash signature
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.RSAKey">
            <summary> Returns the key to use for encryption/decryption </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.BlockSize">
            <summary> 
            For this type of padding, block size is (key byte length - 11) 
            see http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.encrypt.aspx 
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.TransformSize">
            <summary> Output size </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPublicKey.IsPrivateKey">
            <summary> Returns True if this object is also an RSAPrivateKey </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.DefaultKeySize">
            <summary> The default key size in bits to use when constructing a new keypair </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.MinKeySize">
            <summary> The minimum allowed value for an RSA key </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RSAPrivateKey.MaxKeySize">
            <summary> The maximum allowed value for an RSA key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromParameters(System.Security.Cryptography.RSAParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromBytes(System.Byte[])">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromXml(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromStore(System.String)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromStore(System.Security.Cryptography.CspParameters)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor">
            <summary> Create RSAPrivateKey with a new keypair of (DefaultKeySize) bit length </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Int32)">
            <param name="keySize">the bit-size of the key to generate, 384 - 16384 in increments of 8</param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary> Create RSAPrivateKey with the provided key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.CertToPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary> Extract private key from certificate </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.FromXml(System.Xml.XmlReader)">
            <summary> Creates the key from the information provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.ToXml(System.Xml.XmlWriter)">
            <summary> Returns the key information </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RSAPrivateKey.SignHash(CSharpTest.Net.Crypto.Hash)">
            <summary>
            Signs the provided Hash code with the private key and returns the hash signature
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RSAPrivateKey.PublicKey">
            <summary>
            Returns only the public key of this public/private key pair
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RtlProcessKey">
            <summary>
            Provides the ability to encrypt and decrypt data accessable by the current 
            process only, requires 
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.RtlProcessKey.Encryptor">
            <summary> Returns a single instance of the encryptor, it's thread-safe. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RtlProcessKey.EncryptBlock(System.Byte[])">
            <summary> Encrypts the block of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.RtlProcessKey.DecryptBlock(System.Byte[])">
            <summary> Decrypts the block of data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RtlProcessKey.BlockSize">
            <summary> The size of an input block </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.RtlProcessKey.TransformSize">
            <summary> The size of an output block </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.RtlProcessKey.Win32">
            <summary> Uses the same API as System.Security.SecureString </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureStringStream">
            <summary>
            Allows you to stream raw bytes from a secure string, use UTF16 to decode text
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.MarshallingStream">
            <summary> A stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.BaseStream">
            <summary>
            Provides a base-class for a stream object that is neither readable or writable
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BaseStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.BaseStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.BaseStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.BaseStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.BaseStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.BaseStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.#ctor(System.IntPtr,System.Boolean,System.Int32,System.Int32)">
            <summary> Constructs a stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.#ctor(System.IntPtr,System.Boolean,System.Int32)">
            <summary> Constructs a stream that marshals bytes from unmanaged memory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.MarshallingStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.MarshallingStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.MarshallingStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.MarshallingStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.MarshallingStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.MarshallingStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringStream.#ctor(System.Security.SecureString)">
            <summary>
            Creates a stream from the provided SecureString's contents, use UTF16 to decode text
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringStream.Dispose(System.Boolean)">
            <summary> Disposes of the decrypted string </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SecureStringUtils">
            <summary>
            Various utility methods for access to secure strings.  Lets be real about this before you
            go off, SecureString is NOT secure, it obfuscated.  If your in the process you can access 
            it's contents; however, if you looking at a crash dump or swap file then the SecureString
            provides value... just not much ;)  So these methods are actually my attempt to get people
            to USE a SecureString or similar class (i.e. Password) rather than continuing to use plain
            text strings.  Hopefully with the ease of access within the process we can provide better
            security without.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Creates a SecureString from an enumerable set of characters, like: Create("password string");
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.IO.Stream)">
            <summary>
            Creates a SecureString from a stream of unicode characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.Create(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a SecureString from an stream of characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.AppendAll``1(System.Security.SecureString,``0)">
            <summary>
            Adds the set of characters and makes the string readonly usage: 
            SecureString s = new SecureString().AppendAll("This is a password");
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToTextReader(System.Security.SecureString)">
            <summary>
            Returns a stream of Unicode bytes from the give SecureString instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToStream(System.Security.SecureString)">
            <summary>
            Returns a stream of Unicode bytes from the give SecureString instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToByteArray(System.Security.SecureString)">
            <summary>
            Converts a System.Security.SecureString into an array of bytes using System.Text.Encoding.Unicode
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToByteArray(System.Security.SecureString,System.Text.Encoding)">
            <summary>
            Converts a System.Security.SecureString into an array of bytes using the Encoding specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.ToCharArray(System.Security.SecureString)">
            <summary>
            Returns the secure string as an array of characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SecureStringUtils.CopyChars(System.Security.SecureString,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified range of characters from the secure string to the output character array.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.HashDerivedBytes`1">
            <summary>
            Provided an implementation very similiar to that of the Rfc2898DeriveBytes with the following
            excpetions: 1) any hash size can be used, 2) original key bytes are always hashed, 3) bytes
            generated are always rounded to hash size, thus GetBytes(4) + GetBytes(4) != GetBytes(8)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(`0,System.IO.Stream,CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.IO.Stream,CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt,System.Int32)">
            <summary>
            Constructs the byte generation routine with the specified key, salt, and iteration count
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.GetBytes(System.Int32)">
            <summary>
                 Returns a pseudo-random key from a password, salt and iteration count.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.Dispose">
            <summary>Disposes of the object</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.HashDerivedBytes`1.Reset">
            <summary>
                 Resets the state of the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashDerivedBytes`1.IterationCount">
            <summary>
                 Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.HashDerivedBytes`1.Salt">
            <summary>
                 Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.UnicodeReader">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.#ctor(System.IO.Stream)">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Bufferless stream reader for Unicode data
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Peek">
            <summary> Returns the next character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Read">
            <summary> Returns the next character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary> Reads one character </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.UnicodeReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary> Reads one character </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.WhirlpoolManaged">
            <summary>
             The Whirlpool hashing function.
            
             References
            
             The Whirlpool algorithm was developed by Paulo S. L. M. Barreto and Vincent Rijmen.
            
             See
                  P.S.L.M. Barreto, V. Rijmen,
                  ``The Whirlpool hashing function,''
                  NESSIE submission, 2000 (tweaked version, 2001),
                  https://www.cosic.esat.kuleuven.ac.be/nessie/workshop/submissions/whirlpool.zip
             
             @author  Paulo S.L.M. Barreto
             @author  Vincent Rijmen.
            
            
             =============================================================================
            
             .Net Coversion on May 2010 by Roger O Knapp http://csharptest.net
             Performance considerations: coult be improved by moving to unmanaged/unsafe
             implementations, currently SHA512 is about 10% faster.
             The code remains, as much as was possible, exactly as it appears in the
             example 'c' implementation available from the documentation package on
             http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html
            
             =============================================================================
            
             @version 3.0 (2003.03.12)
            
             =============================================================================
            
             Differences from version 2.1:
            
             - Suboptimal diffusion matrix replaced by cir(1, 1, 4, 1, 8, 5, 2, 9).
            
             =============================================================================
            
             Differences from version 2.0:
            
             - Generation of ISO/IEC 10118-3 test vectors.
             - Bug fix: nonzero carry was ignored when tallying the data length
                  (this bug apparently only manifested itself when feeding data
                  in pieces rather than in a single chunk at once).
             - Support for MS Visual C++ 64-bit integer arithmetic.
            
             Differences from version 1.0:
            
             - Original S-box replaced by the tweaked, hardware-efficient version.
            
             =============================================================================
            
             THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
             OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
             WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
             ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
             LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
             CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
             SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
             BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
             WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
             OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
             EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.Initialize">
            <summary>
            Re-initializes the hash algorithm data structures.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the provided bytes to the hash
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.HashFinal">
            <summary>
            Returns the resulting hash code
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEinit">
            <summary>
            Initialize the hashing state.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.processBuffer">
            <summary>
             The core Whirlpool transform.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEadd(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Delivers input data to the hashing algorithm.
            
             @param    source          plaintext data to hash.
             @param    sourcePosition  index of leftmost source u8 containing data (1 to 8 bits).
             @param    sourceLength    how many bytes of source to process.
            
             This method maintains the invariant: bufferBits &lt; DIGESTBITS
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.WhirlpoolManaged.NESSIEfinalize(System.Byte[])">
            <summary>
             Get the hash value from the hashing state.
             
             This method uses the invariant: bufferBits &lt; DIGESTBITS
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Data.CsvOptions">
            <summary>
            Options that define formatting of the CSV file
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Data.CsvOptions.None">
            <summary> No options defined </summary>
        </member>
        <member name="F:CSharpTest.Net.Data.CsvOptions.HasFieldHeaders">
            <summary> The first line contains the names of the fields </summary>
        </member>
        <member name="T:CSharpTest.Net.Data.CsvReader">
            <summary>
            Provides an <see cref="T:System.Data.IDataReader"/> interface to CSV/Tab delimited text files.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.IO.TextReader,CSharpTest.Net.Data.CsvOptions,System.Char,System.IFormatProvider,System.Int32)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="reader">The text reader to read from</param>
            <param name="options">Options for parsing the text</param>
            <param name="fieldDelim">The character used to delineate fields</param>
            <param name="formatter">The format provided used for interpreting numbers and dates</param>
            <param name="depth">Provides for nested CSV parsers</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.IO.TextReader,CSharpTest.Net.Data.CsvOptions,System.Char,System.IFormatProvider)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="reader">The text reader to read from</param>
            <param name="options">Options for parsing the text</param>
            <param name="fieldDelim">The character used to delineate fields</param>
            <param name="formatter">The format provided used for interpreting numbers and dates</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.String)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="inputFile">The text file to read from</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.String,CSharpTest.Net.Data.CsvOptions)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="inputFile">The text file to read from</param>
            <param name="options">Options for parsing the text</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.String,CSharpTest.Net.Data.CsvOptions,System.Char,System.IFormatProvider)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="inputFile">The text file to read from</param>
            <param name="options">Options for parsing the text</param>
            <param name="fieldDelim">The character used to delineate fields</param>
            <param name="formatter">The format provided used for interpreting numbers and dates</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.IO.TextReader)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="reader">The text reader to read from</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.#ctor(System.IO.TextReader,CSharpTest.Net.Data.CsvOptions)">
            <summary> Constructs the CSV reader for the provided text reader </summary>
            <param name="reader">The text reader to read from</param>
            <param name="options">Options for parsing the text</param>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.Dispose">
            <summary>
            Disposes of the reader
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.Close">
            <summary>
            Closes the csv reader and disposes the underlying text reader
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.ReadCsvLine(System.IO.TextReader,System.Char)">
            <summary>
            Provides a single-record parser of CSV content
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"/> to the next record.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetFieldType(System.Int32)">
            <summary>
            Returns typeof(String)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetSchemaTable">
            <summary>
            Returns a DataTable which defines the columns in this CSV file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetName(System.Int32)">
            <summary>
            Returns the name of the column by ordinal
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetOrdinal(System.String)">
            <summary>
            Returns the ordinal of the column by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetValue(System.Int32)">
            <summary>
            Returns the string content of the field by ordinal
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetValues">
            <summary>
            Returns an object[] containing all the strings for the current record.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetValues(System.Object[])">
            <summary>
            Fills an object[] with all the strings for the current record.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetString(System.String)">
            <summary>
            Gets the string value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetData(System.Int32)">
            <summary>
            Returns a <see cref="T:CSharpTest.Net.Data.CsvReader"/> for the specified column ordinal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Data.CsvReader.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.IsClosed">
            <summary>
            Returns true if the reader has been closed
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.Depth">
            <summary>
            Returns the depth (zero based) of the reader when using nested CSV parsers
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.RecordsAffected">
            <summary>
            Returns the current record number of the parser
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.FieldCount">
            <summary>
            Returns the number of fields defined in this record
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.Item(System.String)">
            <summary>
            Returns the string content of the field by name
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Data.CsvReader.Item(System.Int32)">
            <summary>
            Returns the string content of the field by ordinal
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.TimeoutAction">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.#ctor(System.TimeSpan,CSharpTest.Net.Delegates.Action)">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.#ctor(System.TimeSpan,CSharpTest.Net.Delegates.Action,System.Action{System.Exception})">
            <summary>
            Provides scheduling a single-fire event at some duration into the future.  The operation is
            performed once either when the duration expires, or when this object is disposed or collected.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Finalize">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Dispose">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Dispose(System.Boolean)">
            <summary> Fires if the event if needed and closes the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start(System.TimeSpan,CSharpTest.Net.Delegates.Action)">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start(System.TimeSpan,CSharpTest.Net.Delegates.Action,System.Action{System.Exception})">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start``1(System.TimeSpan,System.Action{``0},``0)">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.TimeoutAction.Start``1(System.TimeSpan,System.Action{``0},``0,System.Action{System.Exception})">
            <summary> Enqueues a task to be performed at some time in the future </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.ByteEncoding">
            <summary> Defines a type of formatting for encoding byte[] to a string value </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.ByteEncoding.EncodeBytes(System.Byte[])">
            <summary>Encodes a set of bytes and returns the encoded text as a string</summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.ByteEncoding.DecodeBytes(System.String)">
            <summary>Decodes the string provided and returns the original set of bytes</summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Base64">
            <summary> Standard base-64 padded encoding using the following characters: a-z, A-Z, 0-9, +, /, = </summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Safe64">
            <summary> A modified base-64 non-padded encoding using the following characters: a-z, A-Z, 0-9, -, _ </summary>
        </member>
        <member name="F:CSharpTest.Net.Formatting.ByteEncoding.Hex">
            <summary> The hexidecimal encoding for the bytes using the following characters: 0-9, a-f </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Base64Stream">
            <summary> Provides reading and writing to a stream of base-64 characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Base64Stream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of base-64 characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Base64Stream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Base64Stream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Stream">
            <summary> Provides reading and writing to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Stream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Stream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Stream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of base-64 characters while replacing '+' with '-' and '/' with '_' and ommitting padding. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexEncoding">
            <summary>
            The hexidecimal encoding for the bytes using the following characters: 0-9, a-f
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[])">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'f' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'f' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.EncodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Transforms a sequence of characters from '0' - '9' and 'a' - 'f' in the binary values </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.String)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.String,System.Int32,System.Int32)">
            <summary> Returns the original byte array provided when the encoding was performed </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexEncoding.DecodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.Safe64Encoding">
            <summary>
            This encoding produces a 'url' safe string from bytes, similar to base64 encoding yet
            it replaces '+' with '-', '/' with '_' and omits padding.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[])">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.String)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.String,System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.HtmlLightDocument">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightDocument">
            <summary>
            Inteded to quickly read 'mostly' well-formed html text
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightElement">
            <summary>
            Represents an html element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.ROOT">
            <summary>Provides tag name assigned to the ROOT node of the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.TEXT">
            <summary>Provides tag name assigned to the TEXT nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.CDATA">
            <summary>Provides tag name assigned to the CDATA nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.COMMENT">
            <summary>Provides tag name assigned to comment nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.CONTROL">
            <summary>Provides tag name assigned to the TEXT nodes in the heirarchy</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.PROCESSING">
            <summary>Provides tag name assigned to processing instruction nodes in the heirarchy</summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.#ctor(CSharpTest.Net.Html.XmlLightElement,System.String)">
            <summary>
            Creates a new xml element
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.GetElementById(System.String)">
            <summary>
            Deep-scans heirarchy for the element with the provided id
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.FindElement(System.Predicate{CSharpTest.Net.Html.XmlLightElement})">
            <summary>
            Finds the elements matching the provided criteria
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.Children">
            <summary> Returns the children of this html element </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightElement.Attributes">
            <summary> Returns the attributes of this html element </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.Remove">
            <summary> Removes this node from it's parent element </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.Select(System.String)">
            <summary>
            Returns the elements from the given xpath expression
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.SelectSingleNode(System.String)">
            <summary>
            Returns the first element from the given xpath expression
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteText(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes the text to the xml writer while preserving entities and still ensuring 
            the remainder of the text is properly encoded.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes XML to an xml writer to ensure proper formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteXml(System.IO.TextWriter)">
            <summary>
            Writes the re-constructed innerHTML in a well-formed Xml format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.WriteUnformatted(System.IO.TextWriter)">
            <summary>
            Writes the modified document in it's original formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightElement.CreateNavigator">
            <summary>
            Returns a new System.Xml.XPath.XPathNavigator object.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.TagName">
            <summary> Returns the tag name of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.OpeningTagWhitespace">
            <summary> Whitespace appearing before the close of the start tag (&lt;div   &gt;) </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.ClosingTagWhitespace">
            <summary> Whitespace appearing before the close of the end tag (&lt;/div   &gt;) </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.OriginalTag">
            <summary> 
            Returns the text in it's original format. Where IsSpecial == true, this is used to rewrite
            the content.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Value">
            <summary> Returns the value (if any) of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Parent">
            <summary> Returns the parent (if any) of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Document">
            <summary>
            Returns the root-level node
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsText">
            <summary>
            Returns true if the node has a textual value, i.e. text or cdata
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsComment">
            <summary>
            Returns true if the node is a comment
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsEmpty">
            <summary>
            Returns true if the node is self-closing (i.e. ends with '/>')
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.IsSpecialTag">
            <summary>
            Returns true if the node is not a normal element
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.Namespace">
            <summary>
            Returns the namespace or empty string
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.NamespaceOrNull">
            <summary>
            Returns the namespace or null
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.LocalName">
            <summary>
            Returns the name without the namespace prefix
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.InnerText">
            <summary> Returns the inner text of this html element </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.NextSibling">
            <summary>
            Returns the next sibling element
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.PrevSibling">
            <summary>
            Returns the previous sibling element
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightElement.InnerXml">
            <summary>
            Returns the re-constructed innerHTML in a well-formed Xml format
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.IXmlLightReader">
            <summary>
            Provides a means by which the XmlLightParser can inform you of the document
            elements encountered.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.StartDocument">
            <summary> Begins the processing of an xml input </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Begins the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Ends the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddText(System.String)">
            <summary> Encountered text or whitespace in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddComment(System.String)">
            <summary> Encountered comment in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddCData(System.String)">
            <summary> Encountered cdata section in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddControl(System.String)">
            <summary> Encountered control information &lt;! ... &gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.AddInstruction(System.String)">
            <summary> Encountered processing instruction &lt;? ... ?&gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.IXmlLightReader.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightDocument._parserStack">
            <summary>
            Stores the current node stack while parsing documents
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightDocument.Root">
            <summary>
            Returns the root element
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.#ctor">
            <summary>
            Parses the document provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.#ctor(System.String)">
            <summary>
            Parses the document provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the re-constructed innerXML
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.WriteUnformatted(System.IO.TextWriter)">
            <summary>
            Writes the re-constructed document while attempting to preserve formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.StartDocument">
            <summary> Begins the processing of an xml input </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Begins the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> Ends the processing of an xml tag </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddText(System.String)">
            <summary> Encountered text or whitespace in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddComment(System.String)">
            <summary> Encountered comment in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddCData(System.String)">
            <summary> Encountered cdata section in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddControl(System.String)">
            <summary> Encountered control information &lt;! ... &gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.AddInstruction(System.String)">
            <summary> Encountered processing instruction &lt;? ... ?&gt; in the document </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightDocument.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._nonClosedTags">
            <summary>
            According to the Xhtml DTD these tags do not cotain anything
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._nonNestingTags">
            <summary>
            These tags automatically close a containing tag of the same type, 
            i.e. &lt;p>&lt;p>&lt;/p> is the same as &lt;p>&lt;/p>&lt;p>&lt;/p>
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.HtmlLightDocument._htmlHeirarchy">
            <summary>
            Strict-Heirarchy elements are elements that have a required parent type(s)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.#ctor">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.#ctor(System.String)">
            <summary>
            Represents a loosly parsed html document
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.StartTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.EndTag(CSharpTest.Net.Html.XmlTagInfo)">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.HtmlLightDocument.EndDocument">
            <summary> Ends the processing of an xml input </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightAttributes">
            <summary>
            A collection of attributes for an element
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The name of the attribute to find</param>
            <param name="value">Set to the value of the attribute</param>
            <returns>Returns true if the attribute was defined</returns>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.ContainsKey(System.String)">
            <summary> Returns true if hte attribute is defined </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.Add(System.String,System.String)">
            <summary>
            Adds a new attribute to the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.Remove(System.String)">
            <summary>
            Removes an item from the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.ToArray">
            <summary>
            Returns the attributes as a collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttributes.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Item(System.String)">
            <summary>
            Gets or Sets the attribute's unencoded text value
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttributes.Keys">
            <summary>
            Returns the names of the attributes in appearance order
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XhtmlDTDSpecification">
            <summary>
            Defines the required DTD specification
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.None">
            <summary> Use DTD only if defined </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlStrict_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlTransitional_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.XhtmlFrameset_10">
            <summary> 
            Use the XHTML 1.0 Transitional DTD 
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XhtmlDTDSpecification.Any">
            <summary> 
            Allow any of the supported DTDs, but must be declared and compliant 
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XhtmlValidation">
            <summary>
            Provides validation of Xhtml documents based on w3c DTDs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.#ctor">
            <summary> Creates a validator that requires documents to use any of the three DTD specifications </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.#ctor(CSharpTest.Net.Html.XhtmlDTDSpecification)">
            <summary> Creates a validator that requires documents to use the specified DTD </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.String,System.IO.TextReader)">
            <summary> Validate the input textreader </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.IO.TextReader)">
            <summary> Validate the input textreader </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XhtmlValidation.Validate(System.String)">
            <summary> Validate the input filename </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlQuoteStyle">
            <summary> The quote used with an attribute value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.None">
            <summary> The value was not defined, no '=' sign </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Missing">
            <summary> The value was not quoted, name=value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Single">
            <summary> The value was not quoted, name='value' </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlQuoteStyle.Double">
            <summary> The value was not quoted, name="value" </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightAttribute">
            <summary>
            Represents a single attribute on an xml element
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.EmptyList">
            <summary> A static empty list of attributes </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightAttribute.#ctor(System.String)">
            <summary> XmlLightAttribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Ordinal">
            <summary> The offset of the attribute in the list </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Name">
            <summary> The full name of the attribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Value">
            <summary> The original encoded text value of the attribute </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Quote">
            <summary> The character used to quote the original value </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightAttribute.Before">
            <summary> The white-space characters preceeding the attribute name </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttribute.Namespace">
            <summary>
            Returns the namespace or empty string
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttribute.NamespaceOrNull">
            <summary>
            Returns the namespace or null
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Html.XmlLightAttribute.LocalName">
            <summary>
            Returns the name without the namespace prefix
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlTagInfo">
            <summary>
            Wraps up the information about a tag start while parsing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlTagInfo.#ctor(System.String,System.Boolean)">
            <summary> XmlTagInfo </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.FullName">
            <summary>The full name token of the element 'ns:name'</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.SelfClosed">
            <summary> True if the tag is self-closing/empty: &lt;empty/&gt; </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.EndingWhitespace">
            <summary> THe space preceeding the tag close '>'</summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.UnparsedTag">
            <summary> The complete tag in raw/unparsed form </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlTagInfo.Attributes">
            <summary> The name/value pair attributes </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightParser">
            <summary>
            Provides a means by which you can cursur through xml/html documents and be notified for each tag/text/etc
            via implementing the IXmlLightReader interface.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.XmlElementParsing">
            <summary>
            Provides a regular expression to match xml/html tags, comments, cdata, etc
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.HtmlElementParsing">
            <summary>
            Provides a regular expression to match xml/html tags, comments, cdata, etc
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.HtmlAttributeParsing">
            <summary>
            Provides a regular expression to match xml/html attribute name/value pairs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided xml/html document into discrete components and provides the
            information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,CSharpTest.Net.Html.XmlLightParser.AttributeFormat,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided xml/html document into discrete components and provides the
            information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.Parse(System.String,System.Text.RegularExpressions.Regex,CSharpTest.Net.Html.IXmlLightReader)">
            <summary>
            Parses the provided document into discrete components using the regex provided and 
            provides the information to the provided reader, see XmlLightDocument
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.ParseAttributes(System.String)">
            <summary>
            Returns an enumeration of attribute name/value pairs from within an element:
            &lt;elem attr="value"&gt;
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Html.XmlLightParser.ParseText(System.String)">
            <summary>
            Returns an enumeration of attribute name/value pairs from within an element:
            &lt;elem attr="value"&gt;
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Html.XmlLightParser.AttributeFormat">
            <summary> Determines how strict attributes are treated durring parsing </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.AttributeFormat.Html">
            <summary> allows non-value and unquoted attributes </summary>
        </member>
        <member name="F:CSharpTest.Net.Html.XmlLightParser.AttributeFormat.Xml">
            <summary> requires attributes to have quoted values </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.ICloneable`1">
            <summary>
            Provides a strongly typed shallow copy of the current object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ICloneable`1.Clone">
            <summary>
            Returns a shallow clone of this object.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IReadOnlyCollection`1">
            <summary>
            Provides common interface members for the implementation of a Set
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.IndexOf(`0)">
            <summary> Returns the zero-based index of the item or -1 </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.Contains(`0)">
            <summary> Returns true if the item is already in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IReadOnlyCollection`1.ToArray">
            <summary> Returns this collection as an array </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.IReadOnlyCollection`1.Item(System.Int32)">
            <summary> Access an item by it's ordinal offset in the list </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrdinalList">
            <summary>
            An ordinal list is a list optimized to store lists of integer data that can then be manipulated 
            as a set with intersect/union etc.  Each integer stored is translated to a bit offset and thus
            cann't be stored more than once or in any particular order.  Note: adding the value int.Max will 
            allocate int.Max/8 bytes of memory, so this is best used with ordinal indexes into a list that 
            is smaller than 8,388,608 (one megabyte of bits).  Pre-allocate with Ceiling = max for better
            performance, or add the integers in reverse order (highest to lowest).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor">
            <summary> Constructs an empty OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Byte[])">
            <summary> Constructs an OrdinalList from a set of bits represeting the ordinals </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Constructs an OrdinalList from the integer ordinals provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Clear">
            <summary> Empty the OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Adds a range of integer ordinals into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Add(System.Int32)">
            <summary> Adds an integer ordinal into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Remove(System.Int32)">
            <summary> Removes an ordinal from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Contains(System.Int32)">
            <summary> Returns true if the ordinal is in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.CopyTo(System.Int32[],System.Int32)">
            <summary> Extracts the ordinals into an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToArray">
            <summary> Returns the array of ordinals that have been added. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToByteArray">
            <summary> Returns the complete set of raw bytes for storage and reconstitution </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Invert(System.Int32)">
            <summary> Returns the 1's compliment (inverts) of the list up to Ceiling </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.IntersectWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.UnionWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.EnumerateFrom(System.Int32)">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.GetEnumerator">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Count">
            <summary> Semi-expensive, returns the count of ordinals in the collection </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Ceiling">
            <summary> 
            Gets or sets the maximum inclusive ordinal that can be stored in the memory currently
            allocated, ranges from -1 to int.MaxValue
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.IsReadOnly">
            <summary> Returns false </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ReadOnlyList`1">
            <summary> A readonly list of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Creates a readonly list of T by copying the enumeration into a List&lt;T> </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary> Creates a readonly list of T by copying the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary> Creates a readonly list of T creating a copy if desired </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the item or -1 if not found.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.Contains(`0)">
            <summary>
            Returns true if the list contains the specified element.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.ToArray">
            <summary>
            Returns the collection as an array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumeration of the elements in the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the elements in the collection to the specified array
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ReadOnlyList`1.Clone">
            <summary> Returns a shallow clone of this object </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Returns the element at the given offset
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ReadOnlyList`1.Count">
            <summary>
            Returns the count of items contained in the collection
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.SetList`1">
            <summary> Represents an immutable collection of unique items that can be manipulated as a set, intersect/union/etc. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32)">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IndexOf(`0)">
            <summary> Returns the zero-based index of the item or -1 </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Contains(`0)">
            <summary> Returns true if the item is already in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.CopyTo(`0[],System.Int32)">
            <summary> Copy the collection to an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ToArray">
            <summary> Returns this collection as an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clear">
            <summary> Removes all items from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0,System.Int32@)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds a range of items to the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Replace(`0)">
            <summary> Adds or replaces an item in the collection, returns true if an entry was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds or replaces an item in the collection, returns true if any item was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary> Not supported, the list is sorted. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Remove(`0)">
            <summary> Returns a new collection with the item provided removed </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAt(System.Int32)">
            <summary> Removes an item by it's ordinal index in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Removes the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IntersectWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.UnionWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ComplementOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in the provided set that are not in this set </summary>
            <example>{ 1, 2, 3 }.ComplementOf({ 2, 3, 4 }) == { 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.SubtractSet(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ExclusiveOrWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.ExclusiveOrWith({ 2, 3, 4 }) == { 1, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsEqualTo(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2 }.IsEqualTo({ 1, 2 }) == true &amp;&amp; {}.IsEqualTo({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSubsetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2, 4 }.IsSubsetOf({ 1, 2, 3, 4 }) == true &amp;&amp; {}.IsSubsetOf({ 1 }) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSupersetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in the provided set are also in this set </summary>
            <example>{ 1, 2, 3, 4 }.IsSupersetOf({ 1, 2, 4 }) == true &amp;&amp; { 1 }.IsSupersetOf({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary> Copies collection to array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.GetEnumerator">
            <summary> Returns a typed enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clone">
            <summary> Returns a shallow clone of this object </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.EmptySet">
            <summary> Provides an empty set </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Item(System.Int32)">
            <summary> Access an item by it's ordinal offset in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.IsReadOnly">
            <summary> Returns true if the list is read-only </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Count">
            <summary> Returns the count of items in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#IsSynchronized">
            <summary> Returns false </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#SyncRoot">
            <summary> Returns SyncRoot </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoBase.ChangeType(System.Object,System.Type,System.Boolean,System.Object)">
            <summary> Provides the standard type cohersion between types </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IArgument">
            <summary>
            Represents a static or instance method that will be invoked as a command
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IDisplayInfo">
            <summary> A base interface that provides name and display information </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.IDisplayInfo.Help">
            <summary> Renders the help information to Console.Out </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.DisplayName">
            <summary> Returns the display name of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.AllNames">
            <summary> Returns the name of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Category">
            <summary> Returns the category if defined, or the type name if not </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Description">
            <summary> Returns the description of the item </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IDisplayInfo.Visible">
            <summary> Returns true if the items should be displayed. </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.Required">
            <summary> Returns true if the argument is required </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.DefaultValue">
            <summary> Returns the default value if Required == false </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IArgument.Type">
            <summary> Returns the type of the argument </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.AliasNameAttribute">
            <summary>
            Defines an alias name for a command
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.AliasNameAttribute.#ctor(System.String)">
            <summary> Constructs an AliasNameAttribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.AliasNameAttribute.Name">
            <summary> Returns the name of the alias </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IgnoreMemberAttribute">
            <summary>
            Instructs the CommandInterpreter to ignore a specific method/property
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.IgnoreMemberAttribute.#ctor">
            <summary> Constructs an IgnoreMemberAttribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.AllArgumentsAttribute">
            <summary>
            Defines that the string[] argument accepts all arguments provided to the command, useage:
            <code>void MyCommand([AllArguments] string[] arguments)</code>
            or 
            <code>void MyCommand([AllArguments] string[] arguments, ICommandInterpreter ci)</code>
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.AllArgumentsAttribute.#ctor">
            <summary> Constructs an AllArgumentsAttribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DisplayInfoAttribute">
            <summary>
            Provides all the display properties.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.DisplayName">
            <summary> Returns the DisplayName </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.AliasNames">
            <summary> Just the alias names </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.AllNames">
            <summary> Returns the name list </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Category">
            <summary> Returns the Category </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Description">
            <summary> Returns the Description </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAttribute.Visible">
            <summary> Returns the visibility of the command </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute">
            <summary> Contains display info and a default value </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.DefaultValue">
            <summary> Gets/sets the default value for the option </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.DisplayInfoAndValueAttribute.HasDefault">
            <summary> Returns true if a default value was specified </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandFilterAttribute">
            <summary>
            Provides all the properties available for a command 'filter' that is
            called for every command invoked enabling custom processing of arguments
            and pre/post processing.  The attribute is optional, the format of the
            the method prototype is not and must be:
            <code>void (ICommandInterpreter interpreter, ICommandChain chain, string[] arguments);</code>
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandFilterAttribute.#ctor(System.Char)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandFilterAttribute.#ctor(System.Char[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilterAttribute.Keys">
            <summary> Returns the keys associated with this filter </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilterAttribute.Visible">
            <summary> Ignored. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandAttribute">
            <summary>
            Provides all the properties available for a command.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ArgumentAttribute">
            <summary>
            Provides all the properties available for an argument.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ArgumentAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.OptionAttribute">
            <summary>
            Provides all the properties available for an argument.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor(System.String)">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.OptionAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs the attribute </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommand">
            <summary>
            Represents a static or instance method that will be invoked as a command
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommand.Run(CSharpTest.Net.Commands.ICommandInterpreter,System.String[])">
            <summary> Runs this command with the supplied arguments </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommand.Arguments">
            <summary> Returns the arguments defined on this command. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandFilter">
            <summary>
            Represents a static or instance method that is used to filter or pre/post process commands
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandFilter.Run(CSharpTest.Net.Commands.ICommandInterpreter,CSharpTest.Net.Commands.ICommandChain,System.String[])">
            <summary>
            Used to run a command through a set of filters, call chain.Next() to continue processing
            </summary>
            <param name="interpreter">The command interpreter running the command</param>
            <param name="chain">The next link in the chain of filters</param>
            <param name="arguments">The input arguments to the command-line</param>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandFilter.Keys">
            <summary> Returns the possible character keys for this filter when setting the precedence </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandFilter.Keys">
            <summary> Returns the possible character keys for this filter when setting the precedence </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandChain">
            <summary>
            Defines an interface that allows a command filter to call to next filter in the chain
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandChain.Next(System.String[])">
            <summary>
            Calls the next command filter in the chain, eventually processing the command
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.CommandInterpreter">
            <summary>
            The primary class involved in providing a command-line interpreter.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ICommandInterpreter">
            <summary>
            Defines the interface for the command interpreter.  If you use this as a parameter
            it will be provided auto-magically to your command.  To avoid conflicts with ordinal
            argument matching, make this your last argument. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Get(System.String)">
            <summary> 
            Command to get an option value by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Set(System.String,System.Object)">
            <summary> 
            Command to set the value of an option value by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Run(System.String[])">
            <summary> 
            Run the command whos name is the first argument with the remaining arguments provided to the command
            as needed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.Run(System.IO.TextReader)">
            <summary>
            Runs each line from the reader until EOF, can be used with Console.In
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.ICommandInterpreter.ExpandOptions(System.String)">
            <summary>
            Expands '$(OptionName)' within the input string to the named option's value.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.ErrorLevel">
            <summary> 
            Gets/sets the exit code of the operation/process
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Prompt">
            <summary> 
            Gets/sets the prompt, use "$(OptionName)" to reference options
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Commands">
            <summary>
            Lists all the commands that have been added to the interpreter
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.Options">
            <summary>
            Lists all the options that have been added to the interpreter, use the set/get commands
            to modify their values.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.ICommandInterpreter.ReadNextCharacter">
            <summary>
            Reads a keystroke, not from the std:in stream, rather from the console or ui.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.#ctor(System.Object[])">
            <summary>
            Constructs a command-line interpreter from the objects and/or System.Types provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.#ctor(CSharpTest.Net.Commands.DefaultCommands,System.Object[])">
            <summary>
            Constructs a command-line interpreter from the objects and/or System.Types provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddHandler(System.Type)">
            <summary>
            Adds the static methods to the command list, and static properties to the list of
            global options (used with commands set/get)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddHandler``1(``0)">
            <summary>
            Adds the instance methods to the command list, and instance properties to the list of
            global options (used with commands set/get)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddCommand(CSharpTest.Net.Commands.ICommand)">
            <summary> Manually adds a command </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.RemoveCommand(CSharpTest.Net.Commands.ICommand)">
            <summary> Manually remove a command </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddFilter(CSharpTest.Net.Commands.ICommandFilter)">
            <summary>
            Adds a command 'filter' that is called for every command invoked enabling custom processing 
            of arguments and pre/post processing.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.AddOption(CSharpTest.Net.Commands.IOption)">
            <summary> Manually adds an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Get(System.String)">
            <summary> Command to get an option value </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Set(System.String,System.Object)">
            <summary> Command to set the value of an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Set(System.String,System.Object,System.Boolean)">
            <summary> Command to set the value of an option </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.ProcessCommand(System.String[])">
            <summary>
            The last link in the command chain
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.OnError(System.Exception)">
            <summary> called to handle error events durring processing </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.GetHead">
            <summary> returns the chained filters </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.PrecedenceOrder(CSharpTest.Net.Commands.ICommandFilter,CSharpTest.Net.Commands.ICommandFilter)">
            <summary> Compares the command filters in order of precendence </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Run(System.String[])">
            <summary> 
            Run the command whos name is the first argument with the remaining arguments provided to the command
            as needed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Run(System.IO.TextReader)">
            <summary>
            Runs each line from the reader until EOF, can be used with Console.In
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.ExpandOptions(System.String)">
            <summary>
            Expands '$(OptionName)' within the input string to the named option's value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.GetNextCharacter">
            <summary> Default inplementation of get keystroke </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Help(System.String)">
            <summary> Display the Help text to Console.Out </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.GetHtmlHelp(System.String)">
            <summary> Returns the Help as HTML text </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.CommandInterpreter.Help(System.String,System.Boolean)">
            <summary> Display the Help text to Console.Out </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.ErrorLevel">
            <summary> Gets/sets the exit code of the operation/process </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Prompt">
            <summary> Gets/sets the prompt, use "$(OptionName)" to reference options </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Commands">
            <summary>
            Lists all the commands that have been added to the interpreter
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Options">
            <summary>
            Lists all the options that have been added to the interpreter, use the set/get commands
            to modify their values.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.Filters">
            <summary> Lists all the filters that have been added to the interpreter </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.FilterPrecedence">
            <summary> Defines the filter precedence by appearance order of key character </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.CommandInterpreter.ReadNextCharacter">
            <summary>
            Reads a keystroke, not from the std:in stream, rather from the console or ui.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.DefaultCommands">
            <summary>
            A list of built-in commands that can be added to the interpreter
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.None">
            <summary> Not a command, indicates no default commands </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Default">
            <summary> Not a command, indicates the default commands added if not specified </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.All">
            <summary> Not a command, indicates to use all default commands </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Get">
            <summary> A command to get the value of an option </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Set">
            <summary> A command to set the value of an option </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Help">
            <summary> A command to display help about the commands and their options </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.ErrorLevel">
            <summary> An option to set and get the environment error-level </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Prompt">
            <summary> An option that provides customization of the command prompt for interactive mode </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Echo">
            <summary> A command to echo back to std::out the arguments provided. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.More">
            <summary> A command to read the input stream and show one screen at a time to standard output. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.Find">
            <summary> A command to search for a text string in a file or the standard input stream. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.PipeCommands">
            <summary> A command filter that allows piping the output of one command into the input of another. </summary>
        </member>
        <member name="F:CSharpTest.Net.Commands.DefaultCommands.IORedirect">
            <summary> A command filter that allows redirect of std in/out to files. </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.InterpreterException">
            <summary>
            Base exception for assertions and errors encountered while processing commands
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an exception
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an exception durring deserialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Commands.InterpreterException.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts the condition and throws on failure
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.IOption">
            <summary>
            Defines an Option that can be configued/set independantly of the commands.  Used with the set/get
            commands defined by the interpreter.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IOption.Value">
            <summary>
            Gets/sets the value of the option
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Commands.IOption.Type">
            <summary> Returns the type of the option value </summary>
        </member>
        <member name="T:CSharpTest.Net.Commands.ReadNextCharacter">
            <summary>
            Used for obtaining input directly from user rather than from the std:in stream
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AESCryptoKey">
            <summary>
            Provides AES-256 bit encryption using a global IV (Init vector) based on the current process' entry
            assembly.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.DefaultIV">
            <summary> Creates a default IV for the crypto provider if AESCryptoKey.CryptoIV is not set </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor">
            <summary> Creates a new key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor(System.Byte[])">
            <summary> Creates an object representing the specified key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.#ctor(System.Byte[],System.Byte[])">
            <summary> Creates an object representing the specified key and init vector </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.FromBytes(System.Byte[])">
            <summary>
            Serializes the KEY and IV to a single array of bytes.  Use FromByteArray() to restore.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Dispose(System.Boolean)">
            <summary> Disposes of the key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.ToArray">
            <summary>
            Serializes the KEY and IV to a single array of bytes.  Use FromByteArray() to restore.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Encrypt(System.IO.Stream)">
            <summary>Encrypts a stream of data</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Decrypt(System.IO.Stream)">
            <summary> Decrypts a stream of data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Encrypt(System.Byte[])">
            <summary>Encrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AESCryptoKey.Decrypt(System.Byte[])">
            <summary>Decrypts a raw data block as a set of bytes</summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.ProcessDefaultIV">
            <summary>
            Used to define the IV for AES keys created in this process, by default this is MD5(UTF8(Name)) where
            Name is the short-name of either the entry-point assembly, or "CSharpTest.Net.Library" if undefined.
            </summary>
            <remarks>
            The process default IV is used with AESCryptoKey instances that are created without explicitly
            providing the IV value for the key.  This is done internally when using the Password class' 
            CreateKey(...), Encrypt(...), or Decrypt(...) methods.  While this worked well enough for some
            programs, this has proven to be a flawed approach as the entry-point assembly can change.  For example
            if another .NET process call Assembly.Execute() on your executable.  
            
            Applications are advised that they should capture the existing value and store that in App.Config, 
            and set the following prior to using this class, or the Password class.  The entry-points related
            to this that have been marked Obsolete() will be removed in the long-term and by capturing this
            value and manually using it you can ensure your application will continue to function properly.
            </remarks>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.Algorithm">
            <summary> Returns the algorithm key or throws ObjectDisposedException </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.Key">
            <summary> Returns the AES 256 bit key this object was created with </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.AESCryptoKey.IV">
            <summary> Returns the AES 256 bit key this object was created with </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.AsciiEncoder">
            <summary> This class has been moved to CSharpTest.Net.Formatting.Safe64Encoding </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.DecodeBytes(System.String)">
            <summary> Returns the original byte array provided when the encoding was performed </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.DecodeBytes(System.Byte[])">
            <summary> Decodes the ascii text from the bytes provided into the original byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.AsciiEncoder.EncodeBytes(System.Byte[])">
            <summary> Returns a encoded string of ascii characters that are URI safe </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Encryption">
            <summary>
            Maintains backwards compatibility for access to the encryption api
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.CurrentUser">
            <summary>Encrypts data for the current user</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.LocalMachine">
            <summary>Encrypts data for the this machine</summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Encryption.Passthrough">
            <summary>Implements the encryption api but does not change any data</summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Hash">
            <summary> Represents a comparable, sortable, hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.MD5(System.Byte[])">
            <summary> Computes an MD5 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.MD5(System.IO.Stream)">
            <summary> Computes an MD5 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA1(System.Byte[])">
            <summary> Computes an SHA1 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA1(System.IO.Stream)">
            <summary> Computes an SHA1 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA256(System.Byte[])">
            <summary> Computes an SHA256 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA256(System.IO.Stream)">
            <summary> Computes an SHA256 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA384(System.Byte[])">
            <summary> Computes an SHA384 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA384(System.IO.Stream)">
            <summary> Computes an SHA384 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA512(System.Byte[])">
            <summary> Computes an SHA512 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.SHA512(System.IO.Stream)">
            <summary> Computes an SHA512 hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.FromBytes(System.Byte[])">
            <summary> Creates a comparable Hash object from the given hashcode bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.FromString(System.String)">
            <summary> Creates a comparable Hash object from the base-64 encoded hashcode bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.CreateAlgorithm">
            <summary>
            Creates the hash algorithm associated with this length of hash
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.Combine(CSharpTest.Net.Crypto.Hash)">
            <summary>
            If the hash provided is the same size as this hash both hash codes are feed back into
            the hash algorithm associated with this length of hash to produce the result value.
            If the hash provided is a different length, it is first hashed with this algorithm
            before the two values are combined.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.Combine(System.Byte[])">
            <summary>
            Combines the bytes provided by first computing a like sized hash of those bytes and
            then combining the two equal hash values with the same hash algorithm.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.ToArray">
            <summary> Returns a copy of the hash code bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.ToString">
            <summary> Returns the hash code as a base-64 encoded string </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Hash.CompareTo(CSharpTest.Net.Crypto.Hash)">
            <summary> Compares the hash codes and returns the result </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.AlgorithmOID">
            <summary> Returns the OID of the hash algorithm </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.AlgorithmName">
            <summary> Returns the name of the hash algorithm </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.Length">
            <summary> Returns the length in bytes of the hash code </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Hash.HashCode">
            <summary> Returns a hash of the hash code :) </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Password">
            <summary>
            Stores an encrypted version of the supplied password in memory so that it
            can be provided as clear-text to external systems.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PasswordKey">
            <summary>
            Creates an in-memory object that can be used for salted password encryption without
            storing the password in memory (based on Rfc2898DeriveBytes, SHA1 hash of password
            is stored)
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.PasswordKey.DefaultIterations">
            <summary> Adjusts the number of repetitions used when deriving password bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(CSharpTest.Net.Crypto.IPasswordDerivedBytes,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the password from the given password bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.String)">
            <summary> Creates the password from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.#ctor(System.Security.SecureString)">
            <summary> Creates the password from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Dispose(System.Boolean)">
            <summary> Removes the memory representation of this password and key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.CreateKey">
            <summary> Returns the key generated with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.CreateKey(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns the key generated with the current password and the provided salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.CreateKey(CSharpTest.Net.Crypto.Salt,System.Byte[])">
            <summary> Returns the key generated with the current password and the provided salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Encrypt(System.IO.Stream)">
            <summary> Encrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.IO.Stream)">
            <summary> Decrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.IO.Stream,CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Decrypts the stream with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Encrypt(System.Byte[])">
            <summary> Encrypts the bytes with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.Byte[])">
            <summary> Decrypts the bytes with the current password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordKey.Decrypt(System.Byte[],CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Decrypts the bytes with the current password and salt </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.DerivedBytes">
            <summary>
            Returns the derived bytes algorithm for this instance or throws ObjectDisposedException
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.IV">
            <summary> Sets or Gets the IV used when deriving the encryption key </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.Salt">
            <summary> Sets or Gets the salt used with deriving the encryption key </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordKey.IterationCount">
            <summary> Sets or Gets the iterations used with deriving the encryption key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the password from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.String)">
            <summary> Creates the password from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.#ctor(System.Security.SecureString)">
            <summary> Creates the password from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Dispose(System.Boolean)">
            <summary> Removes the memory representation of this password and key </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.CreateHash">
            <summary> Returns a salted hash for the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.CreateHash(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns a salted hash for the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ReadBytes">
            <summary> Returns a stream from which the password can be read </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ReadText">
            <summary> Returns a stream from which the password can be read </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.ToSecureString">
            <summary> Returns a System.Security.SecureString from the password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(CSharpTest.Net.Crypto.Password)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.Equals(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.GetHashCode(CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.op_Equality(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.op_Inequality(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Password.Comparer">
            <summary> return a non-reference equality comparer for this class </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Password.Encoding">
            <summary> Returns the encoding used for passwords </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Password.Passkey">
            <summary>
            Allows overriding the encryption/decryption support for the in-memory password
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Password.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.EqualityComparer.Equals(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Password)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Password.EqualityComparer.GetHashCode(CSharpTest.Net.Crypto.Password)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.PasswordHash">
            <summary> Creates a salted hash </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.PasswordHash.StandardIterations">
            <summary> Defines the derived hash iteration count used </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.FromString(System.String)">
            <summary> recreates a hash from a base-64 encoded string </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.FromBytes(System.Byte[])">
            <summary> recreates a hash from the bytes returned by ToArray() </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.SaltedData)">
            <summary> Recreates a hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.IO.Stream,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates a salted hash from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.Password)">
            <summary> Creates a salted hash from the given password </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(CSharpTest.Net.Crypto.Password,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates a salted hash from the given password and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Boolean,System.Byte[],CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given bytes and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Boolean,System.Byte[])">
            <summary> Creates the hash from the given bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.String,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.String)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Security.SecureString,CSharpTest.Net.Crypto.Salt)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.#ctor(System.Security.SecureString)">
            <summary> Creates the hash from the given data and salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.Dispose">
            <summary> Disposes of hash bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.CompareTo(CSharpTest.Net.Crypto.PasswordHash)">
            <summary> Compares the hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.ToArray">
            <summary> returns the salted-hash bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(CSharpTest.Net.Crypto.Password)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.IO.Stream)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.Byte[])">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.VerifyPassword(System.String)">
            <summary> Returns true if the provided password matches this hash </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.PasswordHash.ToString">
            <summary> Returns the hash as a base-64 encoded string </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.HashCode">
            <summary> Gets the hash </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.Length">
            <summary> returns the salted-hash length in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.PasswordHash.Salt">
            <summary> returns the salt used to create this hash </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.BinaryComparer">
            <summary>
            Dictionary comparer for comparing arrays of bytes by value equality
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.Equals(System.Byte[],System.Byte[])">
            <summary> returns true if both arrays contain the exact same set of bytes. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IComparer{System#Byte[]}#Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary> 
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#Equals(System.Byte[],System.Byte[])">
            <summary> Returns true if the two objects are the same instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Salt">
            <summary>
            Represents a random sequence of bytes used to combine with hash and encryption
            values to provide an extra level of security.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.DefaultSize">
            <summary> The size of the salt if unspecified </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor">
            <summary> Creates a new Salt of DefaultSize </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor(CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Creates a new Salt of the specified size</summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.#ctor(System.Byte[],System.Boolean)">
            <summary> Creates a new Salt using the specified bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.FromBytes(System.Byte[])">
            <summary> Creates salt from the provided bytes or a hash of the bytes </summary>
            <param name="bytes">An array of random bytes of 8, 16, 32, or 64 bytes long </param>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToArray">
            <summary> Returns the salt as an array of bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToString">
            <summary> Returns the base64 encoding of the salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.FromString(System.String)">
            <summary>
            Recreates a salt value from a string
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CopyTo(System.Byte[],System.Int32)">
            <summary> Copy the salt to the specified offset in the byte array </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.ToStream">
            <summary> Returns the salt as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.GetData(System.Byte[])">
            <summary> Returns the salt combined with a copy of the speicified data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.GetData(System.IO.Stream)">
            <summary> Returns the salt combined with a copy of the speicified data as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CreateBytes(CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Creates n bytes of data usable as a salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.CreateBytes(System.Byte[])">
            <summary> Creates n bytes of data usable as a salt </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.Salt.Equals(CSharpTest.Net.Crypto.Salt)">
            <summary> Returns true if the two Salts are using the same data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.BitSize">
            <summary> Returns the size of the salt in bits </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.Length">
            <summary> returns the total length of the salt in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.Salt.HashCode">
            <summary>
            Returns the hash code of the current salt
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.Salt.Size">
            <summary> Size of a salt-key in bits </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b64">
            <summary> 64-bit, 8-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b128">
            <summary> 128-bit, 16-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b256">
            <summary> 256-bit, 32-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b512">
            <summary> 512-bit, 64-byte salt value </summary>
        </member>
        <member name="F:CSharpTest.Net.Crypto.Salt.Size.b1024">
            <summary> 1024-bit, 128-byte salt value </summary>
        </member>
        <member name="T:CSharpTest.Net.Crypto.SaltedData">
            <summary> Represents the combination of Salt and Data together </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.IO.Stream)">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.Byte[])">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(System.Byte[],CSharpTest.Net.Crypto.Salt.Size)">
            <summary> Seperates the salt from the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(CSharpTest.Net.Crypto.Salt,System.IO.Stream)">
            <summary> Combines the salt with the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.#ctor(CSharpTest.Net.Crypto.Salt,System.Byte[])">
            <summary> Combines the salt with the data provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.Dispose">
            <summary> Attempts to clear the data from memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.GetDataBytes">
            <summary> Returns a copy of the data bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.GetDataStream">
            <summary> Returns a stream of just the data </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.ToArray">
            <summary> Returns the Array of Salt and Data together </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.ToStream">
            <summary> Returns the Salt and Data as a stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Crypto.SaltedData.CombineStream(CSharpTest.Net.Crypto.Salt,System.IO.Stream)">
            <summary> Returns a stream that combines the salt and data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SaltedData.Length">
            <summary> Returns the total length of Salt + Data </summary>
        </member>
        <member name="P:CSharpTest.Net.Crypto.SaltedData.Salt">
            <summary> Returns the Salt being used. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action">
            <summary> Encapsulates a method that takes no parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`2">
            <summary> Encapsulates a method that has two parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`3">
            <summary> Encapsulates a method that has three parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Action`4">
            <summary> Encapsulates a method that has four parameters and does not return a value. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1">
            <summary>
            This derivation of EventHandlerForControl&lt;TEventArgs> will simply ignore the call
            if the control's handle is not at the time the delegate is invoked.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForControl`1">
            <summary>
            Provies a wrapper type around event handlers for a control that are safe to be
            used from events on another thread.  If the control is not valid at the time the
            delegate is called an exception of type ObjectDisposedExcpetion will be raised.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Delegates.EventHandlerForControl`1._control">
            <summary> The control who's thread we will use for the invoke </summary>
        </member>
        <member name="F:CSharpTest.Net.Delegates.EventHandlerForControl`1._delegate">
            <summary> The delegate to invoke on the control </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified delegate converting it to the expected
            EventHandler&lt;TEventArgs> delegate type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Used to handle the condition that a control's handle is not currently available.  This
            can either be before construction or after being disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.op_Implicit(CSharpTest.Net.Delegates.EventHandlerForControl{`0})~System.EventHandler{`0}">
            <summary>
            This object will allow an implicit cast to the EventHandler&lt;T> type for easier use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.EventHandler(System.Object,`0)">
            <summary>
            Handles the 'magic' of safely invoking the delegate on the control without producing
            a dead-lock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForControl`1.IsControlValid(System.Windows.Forms.Control)">
            <summary>
            Performs a thread-safe test on IsHandleCreated and returns the result.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.EventHandlerForControl`1.MethodInvokerImpl">
            <summary>
            The class is used to take advantage of a special-case in the Control.InvokeMarshaledCallbackDo()
            implementation that allows us to preserve the exception types that are thrown rather than doing
            a delegate.DynamicInvoke();
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.EventHandlerForActiveControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Handle the case when the control is not valid
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1">
            <summary>
            This derivation of EventHandlerForControl&lt;TEventArgs> will directly call the delegate
            on the current thread if the control's handle is not valid rather than raising the
            ObjectDisposedExcpetion.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.EventHandler{`0})">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.#ctor(System.Windows.Forms.Control,System.Delegate)">
            <summary>
            Constructs an EventHandler for the specified method on the given control instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Delegates.ForcedEventHandlerForControl`1.OnControlDisposed(System.Object,`0)">
            <summary>
            Handle the case when the control is not valid
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`1">
            <summary> Encapsulates a method that takes no parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`2">
            <summary> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`3">
            <summary> Encapsulates a method that has two parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`4">
            <summary> Encapsulates a method that has three parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Delegates.Func`5">
            <summary> Encapsulates a method that has four parameters and returns a value of the type specified by the TResult parameter. </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.ITransactable">
            <summary> Supplies a common interface to transaction based objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ITransactable.Commit">
            <summary> Completes the operation </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ITransactable.Rollback">
            <summary> Aborts the operation and reverts pending changes </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.Singleton`1">
            <summary>
            A static singleton and factory that uses a globally common instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Interfaces.Singleton`1.Instance">
            <summary>
            Returns the singleton instance of T
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Interfaces.Singleton`1.Factory">
            <summary>
            Returns a factory that returns the singleton instance
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.NewFactory`1">
            <summary>
            A factory that creates a new instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.NewFactory`1.Create">
            <summary> Returns a new instance of T </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.FactoryMethod`1">
            <summary>
            A delegate that takes no arguemnts and returns a single value
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.DelegateFactory`1">
            <summary>
            A factory that creates a new instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.DelegateFactory`1.#ctor(CSharpTest.Net.Interfaces.FactoryMethod{`0})">
            <summary> A factory that delegates instance creation </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.DelegateFactory`1.Create">
            <summary> Returns an instance of T </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.InstanceFactory`1">
            <summary>
            A factory that always returns the same instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.InstanceFactory`1.#ctor(`0)">
            <summary> Provide the instance of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.InstanceFactory`1.Create">
            <summary> Returns the instance of T given to the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.BackgroundWriter">
            <summary>
            Provides a single-threaded writer to a stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.#ctor(System.IO.Stream)">
            <summary>
            Create the writer and thread
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create the writer and thread
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Dispose(System.Boolean)">
            <summary> Closes the worker thread </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Close">
            <summary>
            Stops the worker thread after completing the pending writes.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.BeginFlush">
            <summary>
            Enqueues a flush command and returns immediately
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Flush">
            <summary>
            Waits for all pending writes and flushes the stream prior to returning
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Perform(System.Action{System.IO.Stream})">
            <summary>
            Perform an action on the worker thread with the stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Perform(System.Action{System.IO.Stream},System.Threading.EventWaitHandle)">
            <summary>
            Perform an action on the worker thread with the stream and sets the signal
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a series of bytes to the stream at the current position
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Write(System.Byte[],System.Int32,System.Int32,System.Threading.EventWaitHandle)">
            <summary>
            Write a series of bytes to the stream at the current position and sets the signal
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a series of bytes to the stream at the specified position
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Write(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.EventWaitHandle)">
            <summary>
            Write a series of bytes to the stream at the specified position and sets the signal
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BackgroundWriter.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a number of bytes up to length that is pending a write at the position specified and
            copies those bytes into buffer the offset provided.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexStream">
            <summary> Provides reading and writing to a stream of hexidecimal characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexStream.#ctor(System.IO.Stream,System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides reading and writing to a stream of hexidecimal characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.Formatting.HexStream.Transform">
            <summary> Provides a crypto-transform used to read/write to a stream of hexidecimal characters. </summary>
        </member>
        <member name="M:CSharpTest.Net.Formatting.HexStream.Transform.#ctor(System.Security.Cryptography.CryptoStreamMode)">
            <summary> Provides a crypto-transform used to read/write to a stream of hexidecimal characters. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.ClampedStream">
            <summary>
            Provides a stream that clamps the usage of the input stream to a specific range, length or offset
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a stream that limits the users ability to modify data to the specified range
            </summary>
            <param name="rawStream">The stream to use for read/write</param>
            <param name="start">The position in the stream that should start the range of allowed bytes</param>
            <param name="length">The maximum length that can be read from the stream</param>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Creates a stream that limits the users ability to modify data to the specified range
            </summary>
            <param name="rawStream">The stream to use for read/write</param>
            <param name="start">The position in the stream that should start the range of allowed bytes</param>
            <param name="length">The maximum length that can be read from the stream</param>
            <param name="disposeOfStream">True to dispose of the rawStream when this stream is disposed</param>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when length != long.MaxValue</exception>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ClampedStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ClampedStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ClampedStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ClampedStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ClampedStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ClampedStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile">
            <summary>
            Similar behavior to the FragmentedFile; however, a much improved implementation.  Allows for
            file-level commit/rollback or write-by-write commits to disk.  By default provides data-protection
            against process-crashes but not OS crashes.  Use FileOptions.WriteThrough to protect against
            OS crashes and power outtages.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.#ctor(System.String)">
            <summary>
            Creates or opens a TransactedCompoundFile using the filename specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.#ctor(CSharpTest.Net.IO.TransactedCompoundFile.Options)">
            <summary>
            Creates or opens a TransactedCompoundFile using the filename specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Dispose">
            <summary>
            Closes all streams and clears all in-memory data.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Flush(System.Boolean)">
            <summary>
            Flushes any pending writes to the disk and returns.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Commit">
            <summary>
            For file-level transactions, performs a two-stage commit of all changed handles.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Commit``1(System.Action{``0},``0)">
            <summary>
            For file-level transactions, performs a two-stage commit of all changed handles.
            After the first stage has completed, the stageCommit() delegate is invoked.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Rollback">
            <summary>
            For file-level transactions, Reloads the file from it's original (or last committed) state.
            </summary>
            <exception cref="T:System.InvalidOperationException">When CommitOnWrite is true, there is no going back.</exception>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Create">
            <summary>
            Allocates a handle for data, you MUST call Write to commit the handle, otherwise the handle
            may be reallocated after closing and re-opening this file.  If you do not intend to commit
            the handle by writing to it, you should still call Delete() so that it may be reused.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Write(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the bytes provided to the handle that was previously obtained by a call to Create().
            The length must not be more than ((16*BlockSize)-32) bytes in length.  The exact header size
            (32 bytes) may change without notice in a future release.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Read(System.UInt32)">
            <summary>
            Reads all bytes from the from the handle specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Delete(System.UInt32)">
            <summary>
            Deletes the handle and frees the associated block space for reuse.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Clear">
            <summary>
            Immediatly truncates the file to zero-length and re-initializes an empty file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.FirstIdentity">
            <summary>
            Returns the first block that *would* be allocated by a call to Create() on an empty file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile.Options">
            <summary>
            Advanced Options used to construct a TransactedCompoundFile
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Options.#ctor(System.String)">
            <summary>
            Constructs an Options instance
            </summary>
            <param name="filePath">The file name to use</param>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Options.Clone">
            <summary>
            Returns a copy of the options currently specified.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.FilePath">
            <summary>
            Retrieves the file name that was provided to the constructor
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.BlockSize">
            <summary>
            Defines the block-size used for storing data.  Data storred in a given handle must be less than ((16*BlockSize)-8)
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.MaxWriteSize">
            <summary>
            Returns the maximum number of bytes that can be written to a single handle base on the current BlockSize setting.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.FileOptions">
            <summary>
            The FileOptions used for writing to the file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.ReadOnly">
            <summary>
            Gets or sets a flag that controls if the file is opened in read-only mode.  For ReadOnly
            files, another writer may exist; however, changes to the file will not be reflected until
            reload.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CreateNew">
            <summary>
            True to create a new file, false to use the existing file.  If this value is false and the
            file does not exist an exception will be raised.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CommitOnWrite">
            <summary>
            When true every write will rewrite the modified handle(s) back to disk, otherwise the
            handle state is kept in memory until a call to commit has been made.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CommitOnDispose">
            <summary>
            Automatically Commit the storage file when it's disposed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.LoadingRule">
            <summary>
            See comments on the LoadingRule enumerated type and Commit(Action,T)
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule">
            <summary>
            Defines the loading rule to apply when using a transacted file that was interrupted
            durring the commit process.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Default">
            <summary>
            Load all from Primary if valid, else load all from Secondary.  If both fail,
            load either Primary or Secondary for each segment.  This is the normal option,
            use the other options only when recovering from a commit that was incomplete.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Primary">
            <summary>
            If you previously called Commit(Action,T) on a prior instance and the Action
            delegate *was* called, then setting this value will ensure that only the 
            primary state storage is loaded, thereby ensuring you load the 'previous'
            state.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Secondary">
            <summary>
            If you previously called Commit(Action,T) on a prior instance and the Action
            delegate was *not* called, then setting this value will ensure that only the 
            secondary state storage is loaded, thereby ensuring you load the 'previous'
            state.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.Crc32">
            <summary> Provides a simple CRC32 checksum for a set of bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.Int32)">
            <summary> Resumes the computation of a CRC32 value </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.String)">
            <summary> Initailizes the Crc32 value to the checksum of the string as a series of 16-bit values </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.Byte[])">
            <summary> Initailizes the Crc32 value to the checksum of the bytes provided </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.ToString">
            <summary> Returns the computed CRC32 value as a Hex string </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte)">
            <summary> Adds a byte to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.Byte)">
            <summary> Adds a byte to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte[])">
            <summary> Adds an entire array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte[],System.Int32,System.Int32)">
            <summary> Adds a range from an array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.Byte[])">
            <summary> Adds an entire array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.String)">
            <summary> Adds a string to the checksum as a series of 16-bit values (big endian) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.String)">
            <summary> Adds a string to the checksum as a series of 16-bit values </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(CSharpTest.Net.IO.Crc32)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(System.Int32)">
            <summary> Returns true if the CRC32 provided is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Equality(CSharpTest.Net.IO.Crc32,CSharpTest.Net.IO.Crc32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Inequality(CSharpTest.Net.IO.Crc32,CSharpTest.Net.IO.Crc32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Equality(CSharpTest.Net.IO.Crc32,System.Int32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Inequality(CSharpTest.Net.IO.Crc32,System.Int32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.Crc32.Value">
            <summary> Returns the computed CRC32 value </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FileStreamFactory">
            <summary>
            Provides a default implementation of an IFactory for creating streams on a single file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.Create">
            <summary>
            Creates the file stream
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FileStreamFactory.FileName">
            <summary> The FileName that this factory produces streams for </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FindFile">
            <summary>
            Provides an efficient file/directory enumeration that behaves several orders faster than Directory.GetXxxx() methods.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FindFile.UncPrefix">
            <summary> Returns the Unc path prefix used </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.FilesIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the files directly in the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.FoldersIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the folders directly in the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.FilesAndFoldersIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the files and folders directly in the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.AllFilesIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the files anywhere under the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.AllFoldersIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the folders anywhere under the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.AllFilesAndFoldersIn(System.String,System.Action{CSharpTest.Net.IO.FindFile.FileFoundEventArgs})">
            <summary> Enumerates the files and folders anywhere under the directory specified </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor(System.String)">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor(System.String,System.String)">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor(System.String,System.String,System.Boolean)">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Creates a FindFile instance. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.Find(System.String)">
            <summary> Performs the search raising the FileFound event for each entry matching the request </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.Find">
            <summary> Performs the search raising the FileFound event for each entry matching the request </summary>
        </member>
        <member name="E:CSharpTest.Net.IO.FindFile.FileFound">
            <summary>
            The event-handler to raise when a file or folder is found.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.MaxPath">
            <summary>
            Gets or sets the maximum number of allowed characters in a complete path, default = 4kb
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.BaseDirectory">
            <summary> Gets or sets the base directory to search within </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FilePattern">
            <summary>
            Gets or sets the file pattern to match while enumerating files and folders.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Recursive">
            <summary> Gets or sets the Recursive flag </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.IncludeFiles">
            <summary> Gets or sets the IncludeFiles flag </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.IncludeFolders">
            <summary> Gets or sets the IncludeFolders flag </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.RaiseOnAccessDenied">
            <summary> Gets or sets the RaiseOnAccessDenied flag, when set to true an 'Access Denied' can be raised </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FindFile.Info">
            <summary> Provides a simple struct to capture file info, given by <see cref="M:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.GetInfo"/> method </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.ParentPath">
            <summary> Returns the parent folder's full path </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.FullPath">
            <summary> Gets or sets the full path of the file or folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.Name">
            <summary> Returns the file or folder name (with extension) </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.Extension">
            <summary> Returns the extenion or String.Empty </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.ParentPathUnc">
            <summary> Returns the UNC path to the parent folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.FullPathUnc">
            <summary> Returns the UNC path to the file or folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.Length">
            <summary> Gets or sets the length in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.Attributes">
            <summary> Gets or sets the file or folder attributes </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.CreationTimeUtc">
            <summary> Gets or sets the file or folder CreationTime in Utc </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.LastAccessTimeUtc">
            <summary> Gets or sets the file or folder LastAccessTime in Utc </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.Info.LastWriteTimeUtc">
            <summary> Gets or sets the file or folder LastWriteTime in Utc </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FindFile.FileFoundEventArgs">
            <summary>
            Provides access to the file or folder information durring enumeration, DO NOT keep a reference to this
            class as it's meaning will change durring enumeration.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.GetInfo">
            <summary>
            Captures the current state as a <see cref="T:CSharpTest.Net.IO.FindFile.Info"/> structure.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.ParentPath">
            <summary> Returns the parent folder's full path </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.ParentPathUnc">
            <summary> Returns the UNC path to the parent folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.FullPath">
            <summary> Gets the full path of the file or folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.FullPathUnc">
            <summary> Returns the UNC path to the file or folder </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.Name">
            <summary> Returns the file or folder name (with extension) </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.Extension">
            <summary> Returns the extenion or String.Empty </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.Length">
            <summary> Gets the length in bytes </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.Attributes">
            <summary> Gets the file or folder attributes </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.CreationTimeUtc">
            <summary> Gets the file or folder CreationTime in Utc </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.LastAccessTimeUtc">
            <summary> Gets the file or folder LastAccessTime in Utc </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.LastWriteTimeUtc">
            <summary> Gets the file or folder LastWriteTime in Utc </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsReadOnly">
            <summary> Returns true if the file or folder is ReadOnly </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsHidden">
            <summary> Returns true if the file or folder is Hidden </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsSystem">
            <summary> Returns true if the file or folder is System </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsDirectory">
            <summary> Returns true if the file or folder is Directory </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsReparsePoint">
            <summary> Returns true if the file or folder is ReparsePoint </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsCompressed">
            <summary> Returns true if the file or folder is Compressed </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsOffline">
            <summary> Returns true if the file or folder is Offline </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.IsEncrypted">
            <summary> Returns true if the file or folder is Encrypted </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FindFile.FileFoundEventArgs.CancelEnumeration">
            <summary> Gets or sets the Cancel flag to abort the current enumeration </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FragmentedFile">
            <summary>
            Provides a means of storing multitudes of small files inside one big one.  I doubt this is a
            good name for it, but it works.  Anyway, the file is broken into fixed size blocks and each
            block can be chained to another to allow the sub-allocation to grow larger than the block size.
            This is the primary storage vehicle for the BPlusTree implementation.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsDefault">
            <summary> Common operational values for 'normal' files </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsWriteThrough">
            <summary> Common operational values for using OS cache write-through (SLOW) </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsNoBuffering">
            <summary> Uses FILE_FLAG_NO_BUFFERING see http://msdn.microsoft.com/en-us/library/cc644950(v=vs.85).aspx (SLOWEST) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size that was specified when CreateNew() was called</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size that was specified when CreateNew() was called</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
            <param name="options">The file options to use when opening the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size on disk to be used for allocations</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
            <param name="access">The file access requested</param>
            <param name="share">The file share permissions</param>
            <param name="options">The file options to use when opening the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="streamFactory">An IFactory that produces streams for a storage</param>
            <param name="blockSize">The block size to be used for allocations</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary> Internal use to specify aligned IO when using NoBuffering file option </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Dispose">
            <summary>
            Closes the storage, a must-do to save a costly recomputation of free block on open
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(System.String,System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.WriteEmtpy(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Clear">
            <summary> Destroys all contents of the file and resets to an initial state </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Create">
            <summary> Creates a new allocation block within the file </summary>
            <returns> A unique integer id for the block to be used with Open/Delete </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Create(System.Int64@)">
            <summary> Creates a new allocation block within the file </summary>
            <param name="identity">A unique integer id for the block to be used with Open/Delete</param>
            <returns>The stream to write to the newly created block</returns>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Open(System.Int64,System.IO.FileAccess)">
            <summary>
            Opens the file with the identity previously obtained by Create() using the 
            access provided; however, Read+Write is not supported, use either Read or
            Write but not both.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Delete(System.Int64)">
            <summary>
            Deletes the contents written to the identity provided and returns the
            identity to the available pool.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.ForeachBlock(System.Boolean,System.Boolean,System.Converter{System.Exception,System.Boolean})">
            <summary> Used for enumeration of the storage blocks in the file. </summary>
            <param name="allocatedOnly"> Allows enumeration of all stream, or of just the externally allocated streams </param>
            <param name="verifyReads"> Determines if the checksum should be verified while reading the block bytes </param>
            <param name="ignoreException"> A method that returns true to ignore the exception and continue processing </param>
            <returns>Enumeration of the identity and data stream of each block in the file</returns>
        </member>
        <member name="P:CSharpTest.Net.IO.FragmentedFile.FirstIdentity">
            <summary> Returns the 'first' block identity that can be allocated </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.SegmentedMemoryStream">
            <summary>
            Creates a stream over an array of byte arrays in memory to reduce use of the LOH and array resizing operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.#ctor">
            <summary>
            Creates a memory stream that uses 32k segments for storage
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.#ctor(System.Int32)">
            <summary>
            Create a memory stream that uses the specified size of segments
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.#ctor(CSharpTest.Net.IO.SegmentedMemoryStream)">
            <summary> Creates a 'clone' of the stream sharing the same contents </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SegmentedMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.SegmentedMemoryStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.SegmentedMemoryStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.SegmentedMemoryStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.SegmentedMemoryStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.SegmentedMemoryStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.SharedMemoryStream">
            <summary>
            A memory stream that can be cloned to create an instance for another thread to access
            the same memory pool.  
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SharedMemoryStream.#ctor">
            <summary>
            Creates a memory stream that uses 32k segments for storage
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SharedMemoryStream.#ctor(System.Int32)">
            <summary>
            Create a memory stream that uses the specified size of segments
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SharedMemoryStream.#ctor(CSharpTest.Net.IO.SharedMemoryStream)">
            <summary> Creates a 'clone' of the stream sharing the same contents </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.SharedMemoryStream.Clone">
            <summary>
            Returns a 'clone' of this stream so that the two instances act independantly upon a single set of data
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.StreamCache">
            <summary>
            Provides a simple means of caching several streams on a single file and for a thread 
            to  quickly exclusive access to one of those streams.  This class provides the base
            implementation used by FileStreamCache and FragmentedFile.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream})">
            <summary>
            Constructs the stream cache allowing one stream per thread
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32)">
            <summary>
            Constructs the stream cache with the maximum allowed stream items
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Open">
            <summary>
            Waits for a stream to become available and returns a wrapper on that stream. Just dispose like
            any other stream to return the resource to the stream pool.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Open(System.IO.FileAccess)">
            <summary>
            Waits for a stream to become available and returns a wrapper on that stream. Just dispose like
            any other stream to return the resource to the stream pool.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TempDirectory">
            <summary>
            Provides a class for managing a temporary directory and making reasonable a attempt to remove it upon disposal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CreatePath">
            <summary>
            Creates a new temp directory path that is not currently in use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Attach(System.String)">
            <summary>
            Attaches a new instances of a TempFile to the provided directory path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Delete(System.String)">
            <summary>
            Safely delete the provided directory name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.#ctor">
            <summary>
            Constructs a new temp directory with a newly created directory.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.#ctor(System.String)">
            <summary>
            Manage the provided directory path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Finalize">
            <summary>
            Removes the directory if Dispose() is not called
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Dispose">
            <summary> Disposes of the temporary directory </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Dispose(System.Boolean)">
            <summary>
            Disposes of the temporary directory
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Detatch">
            <summary>
            Detatches this instance from the temporary directory and returns the temp directory's path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.Delete">
            <summary>
            Deletes the current temp directory immediatly if it exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CopyTo(System.String)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies the directory content to the specified target directory name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempDirectory.DeepCopy(System.String,System.String,System.Boolean)">
            <summary>
            Creates a deep-copy of the directory contents
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.TempPath">
            <summary>
            Returns the temporary directory path being managed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.Exists">
            <summary>
            Returns true if the current temp directory exists.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempDirectory.Info">
            <summary>
            Returns the FileInfo object for this temp directory.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactFile">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TempFile">
            <summary>
            Provides a class for managing a temporary file and making reasonable a attempt to remove it upon disposal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Attach(System.String)">
            <summary>
            Attaches a new instances of a TempFile to the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromExtension(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CreateTempPath(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromCopy(System.String)">
            <summary>
            Creates a temp file having a copy of the specified file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete(System.String)">
            <summary>
            Safely delete the provided file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor">
            <summary>
            Constructs a new temp file with a newly created/empty file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor(System.String)">
            <summary>
            Manage the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Finalize">
            <summary>
            Removes the file if Dispose() is not called
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose">
            <summary> Disposes of the temporary file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the temporary file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Detatch">
            <summary>
            Detatches this instance from the temporary file and returns the temp file's path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllBytes">
            <summary> Reads all bytes from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllBytes(System.Byte[])">
            <summary> Writes all bytes to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllText">
            <summary> Reads all UTF8 text from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllText(System.String)">
            <summary> Writes all UTF8 text to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete">
            <summary>
            Deletes the current temp file immediatly if it exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Create">
            <summary>
            Re-Creates and Opens the temporary file for writing, multiple calls will truncate existing data.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Open">
            <summary>
            Open or Create the temporary file for reading and writing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read(System.IO.FileShare)">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.TempPath">
            <summary>
            Returns the temporary file path being managed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Exists">
            <summary>
            Returns true if the current temp file exists.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Length">
            <summary>
            Gets or sets the current length of the temp file.  If setting the length on a file that
            does not exist one will be created.  If getting the length of a file that doesnt exist
            zero will be returned.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Info">
            <summary>
            Returns the FileInfo object for this temp file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.#ctor(System.String)">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.Commit">
            <summary>
            Commits the replace operation on the file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.Rollback">
            <summary> 
            Aborts the operation and reverts pending changes 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the open stream and the temporary file.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactFile.TargetFile">
            <summary>
            Returns the originally provided filename that is being replaced
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.DisposingStream">
            <summary>
            Servers a dual-role, it can prevent an aggregated stream from disposing, or
            it can manage other objects that need to be disposed when the stream is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.#ctor(System.IO.Stream)">
            <summary> Create the wrapper on the provided stream, add disposables via WithDosposeOf(...) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.Dispose(System.Boolean)">
            <summary> Disposes of the stream and then all objects in the disposable list </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.DisposingStream.WithDisposeOf(System.IDisposable)">
            <summary> Adds an object to this stream that will be disposed when the stream is disposed. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.IOStream">
            <summary>
            A collection of Stream helpers
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllBytes(System.IO.Stream)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[])">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Attempts to read the number of bytes specified and returns the actual count </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadChunk(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary> Attempts to read the number of bytes specified and returns the actual count </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary> Copy the entire input stream to the provided output stream, input stream will be disposed </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary> Copy the specified number of bytes from the input stream to the provided output stream </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.String)">
            <summary> Compress the existing file using an in-place replace. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.String,System.String)">
            <summary> Compress the existing file to the specified target. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Compress(System.IO.Stream,System.IO.Stream)">
            <summary> Compress the contents of the source stream into the target stream. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.String)">
            <summary> Decompress the existing file using an in-place replace. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.String,System.String)">
            <summary> Decompress the existing file to the specified target. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary> Decompress the source stream to the specified target stream. </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.CombinedStream">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.#ctor(System.IO.Stream[])">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary> Creates a single 'pseudo' stream out of multiple input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary> Reads from the next stream available </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.CombinedStream.Dispose(System.Boolean)">
            <summary> Disposes of all remaining streams. </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.CombinedStream.CanRead">
            <summary>  </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.NonClosingStream">
            <summary>
            Provides a stream wrapper that will not close/dispose the underlying stream
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.NonClosingStream.#ctor(System.IO.Stream)">
            <summary> Creates a wrapper around the provided stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.NonClosingStream.Close">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.NonClosingStream.Dispose(System.Boolean)">
            <summary> Prevents the disposal of the aggregated stream </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar">
            <summary>
            Interface to provide a means of channel member registration and cross-process serialization
            of arguments for specific events.  Implementations must be thread-safe even across process
            boundaries.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.RegisterInstance(System.String,System.String,System.String)">
            <summary> Registers a member (instanceId) for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.UnregisterInstance(System.String,System.String)">
            <summary> Unregisters a member (instanceId) from the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.GetRegisteredInstances(System.String)">
            <summary> Enumerates the registered instanceIds for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.GetRegisteredInstances(System.String,System.String)">
            <summary> Enumerates the registered instanceIds who's name is instanceName for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.GetRegisteredInstances(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary> Enumerates the registered instanceIds who's name is instanceName for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.WriteParameters(System.String,System.String,System.String,System.String[])">
            <summary> Serializes the arguments for the event being sent to the specified instance </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IIpcChannelRegistrar.ReadParameters(System.String,System.String,System.String)">
            <summary> Retreives the arguments for the event being sent to the specified instance </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IpcChannelRegistrar">
            <summary>
            Provides a default implementation of the channel registrar usuing the system registry as the 
            storage facility.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.#ctor(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a ChannelRegistrar baseed in the hive specified at the allChannelsRoot path provided
            </summary>
            <param name="rootHive">One of the registry hives ex: Registry.CurrentUser</param>
            <param name="allChannelsRoot">The path to store the ex: @"Software\YourProduct\IpcChannels"</param>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.RegisterInstance(System.String,System.String,System.String)">
            <summary> Registers a member (instanceId) for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.UnregisterInstance(System.String,System.String)">
            <summary> Unregisters a member (instanceId) from the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.GetRegisteredInstances(System.String)">
            <summary> Enumerates the registered instanceIds for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.GetRegisteredInstances(System.String,System.String)">
            <summary> Enumerates the registered instanceIds who's name is instanceName for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.GetRegisteredInstances(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary> Enumerates the registered instanceIds who's name is instanceName for the provided channel name </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.WriteParameters(System.String,System.String,System.String,System.String[])">
            <summary> Serializes the arguments for the event being sent to the specified instance </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcChannelRegistrar.ReadParameters(System.String,System.String,System.String)">
            <summary> Retreives the arguments for the event being sent to the specified instance </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IpcEvent">
            <summary>
            Provides a means of subscribing to a named event on an IpcEventChannel, access via:
            IpcEventChannel["Name"].OnEvent += new IpcSignalEventArgs(MyHandler);
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEvent.#ctor(System.String)">
            <summary>Not intended for external use.</summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEvent.RaiseEvent(CSharpTest.Net.IpcChannel.IpcEventChannel,System.String[])">
            <summary>Not intended for external use.</summary>
        </member>
        <member name="F:CSharpTest.Net.IpcChannel.IpcEvent.Comparer">
            <summary> Used to compare IpcEvent instances by name </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEvent.LocalName">
            <summary> Retrieves the name of this event </summary>
        </member>
        <member name="E:CSharpTest.Net.IpcChannel.IpcEvent.OnEvent">
            <summary> Allows you to subscribe or unsubscribe to the event </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IpcEventChannel">
            <summary>
            Provides a means to send and recieve events (optionally with arguments) across thread/process boundaries 
            to a group of listeners of an event channel.  Subscribe to desired events, call Start/StopListening, or 
            just send events to other listeners on the same channel name.
            </summary>
            <summary>
            Provides the implmentation to send an event message to a group of instances
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.#ctor(System.String,System.String)">
            <summary>
            Creates an IpcEventChannel that persists state in Registry.LocalMachine at hklmKeyPath + channelName
            </summary>
            <param name="hkcuKeyPath">The registry current-user path to all channels ex: @"Software\MyProduct\IpcChannels"</param>
            <param name="channelName">The name of the channel to subscribe or send events to</param>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.#ctor(CSharpTest.Net.IpcChannel.IIpcChannelRegistrar,System.String)">
            <summary> Creates an IpcEventChannel that persists state in IChannelRegistrar provided </summary>
            <param name="registrar">The serialization provider for registration</param>
            <param name="channelName">The name of the channel to subscribe or send events to</param>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.Dispose">
            <summary> Disposes of all resources used by this channel </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.CanCall(System.String)">
            <summary> Returns true if an event can be dispatched to the target on the current thread </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.GetEvents">
            <summary> Returns an enumeration of all known events of this instance </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.RaiseLocal(System.String,System.String[])">
            <summary> Synchronously dispatches the event to this instance's subscribers </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.StartListening">
            <summary> Starts listening for events being posted to this channel on a new thread </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.StartListening(System.String)">
            <summary> Same as StartListening but specifies a name that can be used to lookup this instance </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.StopListening">
            <summary> Stops listening to incoming events on the channel </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.StopListening(System.Int32)">
            <summary> Stops listening to incoming events on the channel </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.EnableAsyncSend">
            <summary>
            Enables a background worker thread to continue sending messages that are incomplete 
            after the expiration of the timeout specified in the Broadcast/SendTo method.  This
            is required to avoid dead-locks if your broadcasting messages within an IpcEvent.OnEvent
            event handler.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.StopAsyncSending(System.Boolean,System.Int32)">
            <summary>
            Shutsdown the worker thread created by a call to EnableAsyncSend() allowing up to
            the number of milliseconds in timeout to shutdown the worker and complete any 
            pending work.  If timeout is 0, the worker will be aborted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.Broadcast(System.String,System.String[])">
            <summary> Sends the event to all channel subscribers </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.Broadcast(System.Int32,System.String,System.String[])">
            <summary> Sends the event to all channel subscribers, waiting at most waitTime </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.SendTo(System.String,System.String,System.String[])">
            <summary> Sends the event to all channel subscribers with the given identity or name (case-insensitive) </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.SendTo(System.Int32,System.String,System.String,System.String[])">
            <summary> Sends the event to all channel subscribers with the given identity or name (case-insensitive) </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.SendTo(System.Collections.Generic.IEnumerable{System.String},System.String,System.String[])">
            <summary> Sends the event to the specified list of instance identities or names (case-insensitive) </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcEventChannel.SendTo(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.String[])">
            <summary> Sends the event to the specified list of instance identities or names (case-insensitive) </summary>
        </member>
        <member name="E:CSharpTest.Net.IpcChannel.IpcEventChannel.OnError">
            <summary> Raised when an event subscriber does not handle an exception </summary>
        </member>
        <member name="E:CSharpTest.Net.IpcChannel.IpcEventChannel.OnModified">
            <summary> Raised when the collection of event names changes </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.InCall">
            <summary> Returns true if the current thread is processing an event </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.ChannelName">
            <summary> Returns the channel name of this instance </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.InstanceId">
            <summary> Returns the identity of this channel when listening </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.Registrar">
            <summary> Returns the storage registrar of this channel </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.ExecutionTimeout">
            <summary> Gets/Sets the number of milliseconds to wait for an event to complete processing </summary>
            <example> channel.ExecutionTimeout = 60000; </example>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.DefaultTimeout">
            <summary> Gets/Sets the number of milliseconds to wait when starting/stopping threads or waiting for a known state </summary>
            <example> channel.DefaultTimeout = 60000; </example>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcEventChannel.Item(System.String)">
            <summary> Registers/Gets an IpcEvent instance for the specified event name </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IpcEventListener">
            <summary>
            Implementation of the IpcEventChannel listener
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.IWaitAndContinue">
            <summary> Describes a set of WaitHandles that, when signaled, trigger a process to continue </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.IWaitAndContinue.CopyHandles(System.Threading.WaitHandle[],System.Int32)">
            <summary>
            Copies the wait handles that will signal that this object is ready to continue processing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.IWaitAndContinue.ContinueProcessing(System.Threading.WaitHandle)">
            <summary> 
            Called after one of the wait handles is signaled, providing the wait handle that was signaled.
            For a Mutex, this may also occur when AbandonedMutexException is raised. 
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.IWaitAndContinue.Completed">
            <summary>
            Returns true when the task is complete, this value may change between calls; however, the
            HandleCount can not change except inside a call to ContinueProcessing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.IWaitAndContinue.HandleCount">
            <summary>
            Returns the number of handles that will be copied when CopyHandles is called, this value
            is invariant except inside a call to ContinueProcessing.  Must not return 0 unless Completed
            is also true.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IpcChannel.IpcSignalEventArgs">
            <summary>
            Represents an event raised by the IpcEventChannel to subscribers.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IpcChannel.IpcSignalEventArgs.#ctor(CSharpTest.Net.IpcChannel.IpcEventChannel,System.String,System.String[])">
            <summary> Creates the event </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcSignalEventArgs.EventChannel">
            <summary> Gets the channel rasing the event </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcSignalEventArgs.EventName">
            <summary> Gets the name of the event </summary>
        </member>
        <member name="P:CSharpTest.Net.IpcChannel.IpcSignalEventArgs.Arguments">
            <summary> Gets any arguments sent with the event </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.AssemblyRunner">
            <summary>
            Create an AppDomain configured to run the .Net Assembly provided and marshalls Console input/output to and
            from the app domain when run.  This allow a more performant execution of .Net command-line tools while
            keeping with *most* of the behavior of running out-of-process.  Some serious side effects can occur when
            using Environment.* settings like CurrentDirectory and ExitCode since these are shared with the appdomain.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.IRunner">
            <summary>
            The common interface between spawning processes, and spawning scripts.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run(System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.IRunner.Start(System.String[])">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.IRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.IRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.IRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.#ctor(System.String)">
            <summary>
            Constructs the AppDomain for the given executable by using it's path for the base directory and configuraiton file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Finalize">
            <summary>
            Ensures clean-up of the app domain... This has to be pushed off of the GC Cleanup thread as AppDoamin.Unload will
            fail on GC thread.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.UnloadDomain(System.AppDomain)">
            <summary> Ignores errors from the AppDomain.Unload since exceptions would be unhandled. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.ToString">
            <summary> Returns a debug-view string of process/arguments to execute </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.WaitForExit(System.TimeSpan,System.Boolean)">
            <summary> Waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run(System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start(System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.AssemblyRunner.Start(System.IO.TextReader,System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.IsDisposed">
            <summary>
            Returns true if this object's worker domain has been unloaded.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.AssemblyRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.AssemblyRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.AssemblyRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessExitedEventHandler">
            <summary>
            Raised when a process started with the ProcessRunner exits
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessExitedEventArgs">
            <summary>
            Carries the exit code of the exited process.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessExitedEventArgs.ExitCode">
            <summary>
            Returns the environment exit code of the process
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessOutputEventHandler">
            <summary> A delegate that handles the write to either std::out or std::in for a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessOutputEventArgs">
            <summary> 
            The event args that contains information about the line of text written to either
            std::out or std::in on the created process. 
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessOutputEventArgs.Data">
            <summary> Returns the line of text written to standard out/error  </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessOutputEventArgs.Error">
            <summary> Returns true if the line of text was written to std::error </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ProcessRunner">
            <summary>
            Creates/Spawns a process with the standard error/out/in all mapped.  Subscribe to
            the OutputReceived event prior to start/run to listen to the program output, write
            to the StandardInput for input.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.#ctor(System.String)">
            <summary>Creates a ProcessRunner for the given executable </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.#ctor(System.String,System.String[])">
            <summary>Creates a ProcessRunner for the given executable and arguments </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Dispose">
            <summary> Detaches event handlers and closes input streams </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.ToString">
            <summary> Returns a debug-view string of process/arguments to execute </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.WaitForExit(System.TimeSpan,System.Boolean)">
            <summary> Waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run(System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process with additional arguments and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.RunFormatArgs(System.Object[])">
            <summary> 
            Calls String.Format() for each argument this runner was constructed with giving the object
            array as the arguments.  Once complete it runs the process with the new set of arguments and
            returns the exit code.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Start">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.Start(System.String[])">
            <summary> Starts the process with additional arguments and returns. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ProcessRunner.StartFormatArgs(System.Object[])">
            <summary> 
            Calls String.Format() for each argument this runner was constructed with giving the object
            array as the arguments.  Once complete it starts the process with the new set of arguments and
            returns.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ProcessRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ProcessRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ProcessRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine">
            <summary>
            Defines the information needed to run various types of scripts on a Windows host
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptEngine.GetDefaults(CSharpTest.Net.Processes.ScriptEngine.Language)">
            <summary>
            Returns the default execution options for the specified scripting type
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptEngine.Compile(System.String)">
            <summary> Preprocessing/Compiler routine </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.ScriptType">
            <summary> Returns the type/language of the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.Executable">
            <summary> The script engine executable </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.ArgumentFormat">
            <summary> The arguments to run the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.FileExtension">
            <summary> The file extension of the script </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.RunOptions">
            <summary> The run options </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptEngine.UsesStandardInputScript">
            <summary>
            Returns true if the script should be fed into the std::in stream of the script process
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine.Language">
            <summary>
            Defines the languages we know how to run, or 'Other' when user-defined
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.JScript">
            <summary> .JS Javascript file </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.VBScript">
            <summary> .VBS VBScript file </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.Cmd">
            <summary> .CMD Shell Script </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.PowerShell">
            <summary> PowerShell (v2, or v1) </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.CSharp">
            <summary> .CS C# Program </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.VBNet">
            <summary> Visual Basic .Net Program </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Language.Exe">
            <summary> The script is an executable's path </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptEngine.Options">
            <summary>
            Options for script execution
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Options.None">
            <summary></summary>
        </member>
        <member name="F:CSharpTest.Net.Processes.ScriptEngine.Options.UsesStandardInputScript">
            <summary> Sends the script to the process via std::in rather than using a temp file </summary>
        </member>
        <member name="T:CSharpTest.Net.Processes.ScriptRunner">
            <summary>
            Defines a way to run scripts as an external process and capture their output.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.#ctor(CSharpTest.Net.Processes.ScriptEngine.Language,System.String)">
            <summary>
            Creates a runnable script with the specified language
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.#ctor(CSharpTest.Net.Processes.ScriptEngine,System.String)">
            <summary>
            Creates a runnable script with the specified engine parameters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Kill">
            <summary> Kills the process if it is still running </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.WaitForExit">
            <summary> Closes std::in and waits for the process to exit </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.WaitForExit(System.TimeSpan)">
            <summary> Closes std::in and waits for the process to exit, returns false if the process did not exit in the time given </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run(System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Run(System.IO.TextReader,System.String[])">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Start">
            <summary> Runs the process and returns the exit code. </summary>
        </member>
        <member name="M:CSharpTest.Net.Processes.ScriptRunner.Start(System.String[])">
            <summary> Starts the process and returns. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptEngine">
            <summary> Return teh script engine being used </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptArguments">
            <summary> Return teh arguments to pass to script engine exe </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ScriptFile">
            <summary> Returns the temp file of the script </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ScriptRunner.OutputReceived">
            <summary> Notifies caller of writes to the std::err or std::out </summary>
        </member>
        <member name="E:CSharpTest.Net.Processes.ScriptRunner.ProcessExited">
            <summary> Notifies caller when the process exits </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.StandardInput">
            <summary> Allows writes to the std::in for the process </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.ExitCode">
            <summary> Waits for the process to exit and returns the exit code </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.WorkingDirectory">
            <summary> Gets or sets the initial working directory for the process. </summary>
        </member>
        <member name="P:CSharpTest.Net.Processes.ScriptRunner.IsRunning">
            <summary> Returns true if this instance is running a process </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.ObjectSerializer">
            <summary>
            Container for a serializer of object properties
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertySerializer">
            <summary>
            Represents a set of properties that can be iterated, read, or written to an IPropertyStorage
            instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.#ctor(System.Type,System.String[])">
            <summary>
            Creates a property serializer for the specified type and optionally the properties specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.AddMember(System.String)">
            <summary>
            Adds a single item to the named property collection, again can be a nested property by
            using a path or dotted notation "ClientRectangle.X".
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.Serialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer.Deserialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertySerializer.ContinueOnError">
            <summary>
            Gets or sets a value that controls whether exceptions are swallowed and logged durring
            serialization or deserialization routines.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.#ctor(System.Object,System.String[])">
            <summary>
            Constructs a 'bag-o-property' serializer for the given object instance.
            </summary>
            <param name="instance">The instance whos properties are to be serialized</param>
            <param name="namePaths">optionally named paths to the properties to seralize</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.Serialize(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.ObjectSerializer.Deserialize(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertySerializer`1">
            <summary>
            Represents a set of properties that can be iterated, read, or written to an IPropertyStorage
            instance.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.#ctor(System.String[])">
            <summary>
            Creates a property serializer for the specified type T and optionally the properties specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Serialize(`0,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Writes all properties to the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Deserialize(`0,CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Reads all properties from the specified proeprty serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Serialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary> Hides the base class method </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertySerializer`1.Deserialize(System.Object,CSharpTest.Net.Serialization.INameValueStore)">
            <summary> Hides the base class method </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyType">
            <summary>
            Allows reflection upon a property or field by name.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.#ctor(System.Type,System.String)">
            <summary>
            Constructs the PropertyType info from a source type and an instance property or field name
            </summary>
            <param name="type">Any System.Type object to find the property or field on</param>
            <param name="name">The name of the property or field to find</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.TraverseProperties(System.Type,System.String[])">
            <summary>
            Walks a heirarchy of properties from the given type down.  You can specify in any of the 
            following ways: "ClientRectangle.X", "ClientRectangle/X"
            </summary>
            <example>
            <code>
            //dotted notation:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle.X");
            //path notation:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle/X");
            //individual names:
            PropertyType pt = PropertyType.TraverseProperties(typeof(Form), "ClientRectangle", "X");
            </code>
            </example>
            <param name="fromType">Any System.Type object to traverse from</param>
            <param name="propertyNames">The name of the properties or fields usually '.' delimited</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetValue(System.Object)">
            <summary>
            Returns the value of the property for the specified instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value for the instance supplied
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all of the custom attributes defined on this member, excluding named 
            attributes, or an empty array if there are no custom attributes.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes defined on this member, identified by type, or an
            empty array if there are no custom attributes of that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyType.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more instance of <paramref name="attributeType"/> is defined 
            on this member.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyType.Name">
            <summary>
            Returns the name of the property/field
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyType.Type">
            <summary>
            Returns the type of the property/field
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyValue`1">
            <summary>
            Allows setting or getting a property or field of a known type on an object via reflection
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Reflection.PropertyValue">
            <summary>
            Allows setting or getting a property or field on an object via reflection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue.#ctor(System.Object,System.String)">
            <summary>
            Provided an instance of an object and the name of a property/field this object
            allows you to set/get the value in that property/field
            </summary>
            <param name="instance">An instance of an object to retrieve the property/field from</param>
            <param name="name">The name of the property or field</param>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue.TraverseProperties(System.Object,System.String[])">
            <summary>
            Walks a heirarchy of properties from the given type down.  You can specify in any of the 
            following ways: "ClientRectangle.X", "ClientRectangle/X"
            </summary>
            <example>
            <code>
            //dotted notation:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle.X");
            //path notation:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle/X");
            //individual names:
            PropertyValue pt = PropertyValue.TraverseProperties(this.TopLevelControl, "ClientRectangle", "X");
            </code>
            </example>
            <param name="instance">Any object to begin the traverse from</param>
            <param name="propertyNames">The name of the properties or fields usually '.' delimited</param>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyValue.Value">
            <summary>
            Gets or sets the value of the property
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Reflection.PropertyValue`1.#ctor(System.Object,System.String)">
            <summary>
            Provided an instance of an object and the name of a property/field this object
            allows you to set/get the value in that property/field
            </summary>
            <param name="instance">An instance of an object to retrieve the property/field from</param>
            <param name="name">The name of the property or field</param>
        </member>
        <member name="P:CSharpTest.Net.Reflection.PropertyValue`1.Value">
            <summary>
            Gets or sets the value of the property
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.InvalidFileExtension(System.String)">
            <summary>
            Invalid file extension: '{0}'.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.StringConverterTryParse(System.Type)">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.FailedToConstructSingleton(System.Type)">
            <summary>
            The singleton for type {0} threw an excpetion.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamCompressionFailed">
            <summary>
              Looks up a localized string similar to Failed to compress/decompress the full input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamFailedToRead">
            <summary>
              Looks up a localized string similar to Failed to read from input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ProcessRunnerAlreadyRunning">
            <summary>
              Looks up a localized string similar to The running process must first exit..
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources.FormatStrings">
            <summary>
            Returns the raw format strings.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.InvalidFileExtension_string_ext_">
            <summary>
            Invalid file extension: '{0}'.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.StringConverterTryParse_System_Type_type_">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.FailedToConstructSingleton_System_Type_type_">
            <summary>
            The singleton for type {0} threw an excpetion.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources.ExceptionStrings">
            <summary>
            Returns the raw exception strings.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.ExceptionStrings.SafeFormat(System.String,System.Object[])">
            <summary>
            Formats a message for an exception
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.ExceptionStrings.HelpLinkFormat(System.Int32,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.DebugAssertionFailedException_string_message_">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.DebugAssertionFailedException">
            <summary>
            Exception class: DebugAssertionFailedException
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.String)">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.Assert(System.Boolean,System.String)">
            <summary>
            if(condition == false) throws Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.INameValueStore">
            <summary>
            provides a basic inteface for a reader/writer of string name/value pairs
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property</param>
            <param name="value">Returns the output value if available</param>
            <returns>true if successful or false if data not available</returns>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.INameValueStore.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
            <param name="path">Optional path for context information</param>
            <param name="name">The name of the property to remove</param>
        </member>
        <member name="T:CSharpTest.Net.Serialization.ISerializer`1">
            <summary> Provides serialization for a type </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.ISerializer`1.WriteTo(`0,System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.ISerializer`1.ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.BytesSerializer">
            <summary>
            Returns all bytes in the stream, or writes all bytes to the stream
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.BytesSerializer.RawBytes">
            <summary> Gets a singleton of the BytesSerializer class </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.KeyValueSerializer`2">
            <summary>
            Implements ISerializer of KeyValuePair&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary>
            Provide the key/value serializers to use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.WriteTo(System.Collections.Generic.KeyValuePair{`0,`1},System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.LimitedSerializer">
            <summary>
            Reads the same variant prefixed string and byte[] but with a hard-limit on size
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.LimitedSerializer.#ctor(System.Int32)">
            <summary>
            Constructs a limited length-prefix data reader/writer
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes1024">
            <summary> Reads up to 1024 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes2048">
            <summary> Reads up to 2048 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes4092">
            <summary> Reads up to 4092 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes8196">
            <summary> Reads up to 8196 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String256">
            <summary> Reads up to 256 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String512">
            <summary> Reads up to 512 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String1024">
            <summary> Reads up to 1024 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Unlimited">
            <summary> This is the only class with read/write prefixed data </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.PrimitiveSerializer">
            <summary>
            Provides simple implementations of ISerializer&lt;T> for the primitive .Net types.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Instance">
            <summary> Gets a singleton of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.String">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Boolean">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Byte">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.SByte">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Bytes">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Char">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.DateTime">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.TimeSpan">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int16">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt16">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int32">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt32">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int64">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt64">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Double">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Float">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Guid">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.IntPtr">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UIntPtr">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.Storage">
            <summary>
            Used with one of the implementations in the StorageClasses namespace, this class
            provides rich-type storage on top of the basic INameValueStore string storage
            container.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.#ctor(CSharpTest.Net.Serialization.INameValueStore)">
            <summary>
            Constructs a storage wrapper for the given name/value store and sets the initial
            path to the provided value.
            </summary>
            <param name="store">The storage container to use</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.#ctor(CSharpTest.Net.Serialization.INameValueStore,System.String)">
            <summary>
            Constructs a storage wrapper for the given name/value store and sets the initial
            path to the provided value.
            </summary>
            <param name="store">The storage container to use</param>
            <param name="contextPath">The full context of the storage item, delimit with '/' or '\'</param>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetContext(System.String)">
            <summary>
            Replaces the context path of the storage, dispose of the returned IDisposable
            to restore the Storage's previous ContextPath.
            </summary>
            <param name="contextPath">The full context path to change to</param>
            <returns>Context can be disposed to restore the previous state</returns>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Boolean)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Byte)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.SByte)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Char)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.DateTime)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.TimeSpan)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Decimal)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Double)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Single)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Guid)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Uri)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int16)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt16)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int32)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt32)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Int64)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.UInt64)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.String)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Version)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.GetValue(System.String,System.Type,System.Object)">
            <summary> Retrieves the named defaultValue from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Boolean@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Byte@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.SByte@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Char@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.DateTime@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.TimeSpan@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Decimal@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Double@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Single@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Guid@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Uri@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int16@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt16@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int32@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt32@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Int64@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.UInt64@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.String@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Version@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.TryGetValue(System.String,System.Type,System.Object@)">
            <summary> Retrieves the named value from the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Boolean)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Byte)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.SByte)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Char)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.DateTime)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.TimeSpan)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Decimal)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Double)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Single)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Guid)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Uri)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int16)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt16)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int32)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt32)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Int64)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.UInt64)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.String)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Version)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.SetValue(System.String,System.Type,System.Object)">
            <summary> Writes/Replaces the named value in the storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.Storage.Delete(System.String)">
            <summary> Removes the named value from the storage </summary>
        </member>
        <member name="P:CSharpTest.Net.Serialization.Storage.ContextPath">
            <summary>
            Retrieves the current context path of the store
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage">
            <summary>
            Stores values in the registry at HKCU\Software\{Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.#ctor">
            <summary>
            Stores values in the registry at HKCU\Software\{Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.#ctor(System.String)">
            <summary>
            Stores values in the registry at HKCU\Software\{Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.#ctor(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Stores values in the registry at path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.RegistryStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage">
            <summary>
            Stores values in the IsolatedStorage for the application in {Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.#ctor">
            <summary>
            Stores values in the IsolatedStorage for the application in {Company}\{Product} path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.#ctor(System.String)">
            <summary>
            Stores values in the IsolatedStorage for the application in path.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.IsolatedStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.FileStorage">
            <summary>
            Stores values in the local %AppData% folder in the path {Company}\{Product}.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.#ctor">
            <summary>
            Stores values in the local %AppData% folder in the path {Company}\{Product}.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.#ctor(System.String)">
            <summary>
            Stores values in the local %AppData% folder in the path {Company}\{Product}.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.FileStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage">
            <summary>
            Stores values in the local application's configuration section: "AppSettings"
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Sync">
            <summary>
            Provides syncronization across instances of AppSettingsStorage classes
            modifying the configuration file(s)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.#ctor">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.MakePath(System.String,System.String)">
            <summary>
            Creates the full name of the item from path and name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Open(System.String,System.Configuration.Configuration@)">
            <summary>
            Opens a configuration section and returns the key/value collection associated.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.AppSettingStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage">
            <summary>
            Stores values in the local configuration section: "userSettings"
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.#ctor">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.#ctor(System.Configuration.ConfigurationUserLevel)">
            <summary>
            Stores values in the local application's configuration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.MakePath(System.String,System.String)">
            <summary>
            Creates the full name of the item from path and name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage.Open(System.String,System.Configuration.Configuration@)">
            <summary>
            Opens a configuration section and returns the key/value collection associated.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage">
            <summary>
            Stores values in a IDictionary, by default this dictionary is
            placed in the current AppDomain data slot to provide data that
            is consistant across instances of DictionaryStorage when no
            dictionary is provided to the constructor.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs a DictionarySTorage with a specified dictionary object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.#ctor">
            <summary>
            dictionary is retrieved/placed in the current AppDomain data 
            slot to provide data that is consistant across instances of 
            DictionaryStorage.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Read(System.String,System.String,System.String@)">
            <summary>
            returns true if the property was successfully retireved into the output
            variable 'value'
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Write(System.String,System.String,System.String)">
            <summary>
            Writes the given property by name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.StorageClasses.DictionaryStorage.Delete(System.String,System.String)">
            <summary>
            Removes a property from the storage by name
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.VariantNumberSerializer">
            <summary>
            Provides numeric serializers for packed int/long values.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Instance">
            <summary> Gets a singleton of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Int32">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.UInt32">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Int64">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.UInt64">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.VariantNumberSerializer.CSharpTest#Net#Serialization#ISerializer{System#UInt64}#WriteTo(System.UInt64,System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.VariantNumberSerializer.CSharpTest#Net#Serialization#ISerializer{System#UInt64}#ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReservedWriteLocking`1">
            <summary>
            provides a simple and fast, writer only lock, request for read immediatly return true.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReservedWriteLocking">
            <summary>
            provides a simple and fast, writer only lock, request for read immediatly return true.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ILockStrategy">
            <summary>
            An interface that allows reader/writer locking with the using() statement
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ILockStrategy.WriteVersion">
            <summary>
            The the current writer sequence number
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.ReservedWriteLocking._sync">
            <summary> The syncronization object writers and potential readers use to lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.ReservedWriteLocking._lock">
            <summary> The underlying lock that will be acquired directly by Read() and after the 2nd call to Write() </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.ReservedWriteLocking._writeCount">
            <summary> The current count of the calls to Write() </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.#ctor(CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary>
            Constructs the reader-writer lock using the lock provided
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.TryWrite(System.Int32)">
            <summary>
            The first call reserves the Write lock for the current thread but does not stop reader access
            until the write lock is acquired again.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ReservedWriteLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReservedWriteLocking`1.#ctor">
            <summary> Constructs the reader-writer lock using a new T() </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.DebugLocking`1">
            <summary>
            Creates a tracking/assertion wrapper around an implementation of an ILockStrategy to verify lock state before 
            and after acquisition and release of both reader and writer locks.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.DebugLocking">
            <summary>
            Creates a tracking/assertion wrapper around an implementation of an ILockStrategy to verify lock state before 
            and after acquisition and release of both reader and writer locks.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.#ctor(CSharpTest.Net.Synchronization.ILockStrategy)">
            <summary> Constructs the lock tracking object </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary> Constructs the lock tracking object </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.MaxReaderCount">
            <summary> Returns the highest number of concurrent reads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.MaxWriterCount">
            <summary> Returns the highest number of concurrent writes (aka max recursive count) </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.CurrentReaderCount">
            <summary> Returns the total number of current readers for all threads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.CurrentWriterCount">
            <summary> Returns the total number of current writers for all threads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.TotalReaderCount">
            <summary> Returns the total number of read locks acquired </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.DebugLocking.TotalWriterCount">
            <summary> Returns the total number of write locks acquired </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.Dispose">
            <summary> Disposes of this lock </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLocking.CaptureStack">
            <summary> Capture the stack on every lock aquisition and release </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLocking.LocalReaderCount">
            <summary> Returns the total number of current readers for this thread </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLocking.LocalWriterCount">
            <summary> Returns the total number of current writers for this thread </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking`1.#ctor">
            <summary> Constructs the lock tracking object </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLocking`1.#ctor(System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary> Constructs the lock tracking object </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.DebugLockFactory`1">
            <summary>
            Creates a debugging lock factory that can track locks allocated and all acquired/released read/write locks
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.DebugLockFactory">
            <summary>
            Creates a debugging lock factory that can track locks allocated and all acquired/released read/write locks
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockCounterFactory">
            <summary>
            Creates a debugging lock factory that can track locks allocated and all acquired/released read/write locks
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ILockFactory">
            <summary> A factory that produces instances of ILockStrategy to aquire/release read/write locks </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.#ctor(CSharpTest.Net.Synchronization.ILockFactory)">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.Create">
            <summary> Constructs the lock wrapped in a DebugLocking instance </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.MaxReaderCount">
            <summary> Returns the highest number of concurrent reads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.MaxWriterCount">
            <summary> Returns the highest number of concurrent writes (aka max recursive count) </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.CurrentReaderCount">
            <summary> Returns the total number of current readers for all threads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.CurrentWriterCount">
            <summary> Returns the total number of current writers for all threads </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.TotalReaderCount">
            <summary> Returns the total number of read locks acquired </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.LockCounterFactory.TotalWriterCount">
            <summary> Returns the total number of write locks acquired </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.GlobalAssertNoLocks">
            <summary> Asserts that none of the locks handed out are currently locked for read or write by any thread </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.LockCounting.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.LockCounting.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.LockCounting.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory.LockCounting.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.#ctor(CSharpTest.Net.Synchronization.ILockFactory)">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.#ctor(CSharpTest.Net.Synchronization.ILockFactory,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.Create">
            <summary> Constructs the lock wrapped in a DebugLocking instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.LocalAssertNoLocks">
            <summary> Asserts that none of the locks handed out are currently locked for read or write by this thread </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.CaptureStack">
            <summary> Toggle if the entire stack is captured on lock aquisition/release for newly created locks </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.ConcurrentReads">
            <summary> Toggle if reads are allowed even if write lock was acquired </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.LimitTimeout">
            <summary> Timeout limit for newly created locks </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.LimitNestedReaders">
            <summary> Reader nesting limit for newly created locks </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.LimitNestedWriters">
            <summary> Writer nesting limit for newly created locks </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.LocalReaderCount">
            <summary> Returns the total number of current readers for this thread </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.DebugLockFactory.LocalWriterCount">
            <summary> Returns the total number of current writers for this thread </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.DebugLockCounting.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.DebugLockCounting.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.DebugLockCounting.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory.DebugLockCounting.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory`1.#ctor">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.DebugLockFactory`1.#ctor(System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ExclusiveLocking">
            <summary>
            wraps the reader/writer lock around Monitor
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.ExclusiveLocking._writeVersion">
            <summary> The writer version </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ExclusiveLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IgnoreLockFactory">
            <summary> Singleton instance of ignore locking </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLockFactory.Create">
            <summary> Returns the IgnoreLocking.Instance singleton </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IgnoreLocking">
            <summary>
            wraps the reader/writer lock around Monitor
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.IgnoreLocking.Instance">
            <summary> Singleton instance of ignore locking </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.IgnoreLocking.WriteVersion">
            <summary> Returns Zero. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockCounterFactory`1">
            <summary>
            Creates a debugging lock factory that can track locks allocated and all acquired/released read/write locks
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockCounterFactory`1.#ctor">
            <summary> Constructs the lock tracking factory </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockFactory`1">
            <summary> A generic implementation that constructs a lock by type </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockFactory`1.Create">
            <summary> Returns a new lock of type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReadLock">
            <summary>
            Allows a read lock to be disposed or elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.Acquire(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires the lock within the timeout or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Boolean)">
            <summary> Tracks an existing read lock on a resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires a read lock on the resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.Dispose">
            <summary> Unlocks the resource </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ReadLock.HasReadLock">
            <summary>
            Returns true if read access is locked
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReaderWriterLocking">
            <summary>
            wraps the System.Threading.ReaderWriterLock lock, does not support read->write upgrades
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.#ctor">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ReaderWriterLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SafeLock">
            <summary>
            Used to acquire a lock(object) with a timeout, either specified or the default of 2 minutes.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SafeLock.DefaultTimeout">
            <summary>
            The default timeout value used when one is not provided to the constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.#ctor(System.Object)">
            <summary>
            Acquires the monitor lock on the object within 2 minutes, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.#ctor(System.Object,System.Int32)">
            <summary>
            Acquires the monitor lock on the object within timeoutMilliseconds, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.Dispose">
            <summary> Releases the lock acquired by the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SafeLock`1">
            <summary>
            Exactly as SafeLock except that &lt;T> specifies the exception type to throw.
            Used to acquire a lock(object) with a timeout, either specified or the default of 2 minutes.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.#ctor(System.Object)">
            <summary>
            Acquires the monitor lock on the object within 2 minutes, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.#ctor(System.Object,System.Int32)">
            <summary>
            Acquires the monitor lock on the object within timeoutMilliseconds, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.Dispose">
            <summary> Releases the lock acquired by the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SimpleReadWriteLocking">
            <summary>
            provides a simple and fast, reader-writer lock, does not support read->write upgrades,
            if you need an upgradeable lock, use UpgradeableReadWriteLocking
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.SpinLoops">
            <summary> Max number of Spin loops before polling the _event </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.SpinWaitTime">
            <summary> Number of iterations used for Thread.SpinWait(x) </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#cctor">
            <summary> Setup of the SpinWaitTime/SpinLoops by processor count </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._event">
            <summary> The event used to wake a waiting writer when a read lock is released </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._sync">
            <summary> The syncronization object writers and potential readers use to lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._readersCount">
            <summary> The total number of read locks on this lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._targetReaders">
            <summary> The number of readers the pending writer is waiting upon </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._writeVersion">
            <summary> The number of time a write lock has been issued </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._exclusiveThreadId">
            <summary> The managed thread id for the thread holding the write lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._writeRecursiveCount">
            <summary> The number of times the write lock thread has acquired a write lock </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#ctor">
            <summary>
            Constructs the reader-writer lock using 'this' as the syncronization object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#ctor(System.Object)">
            <summary>
            Constructs the reader-writer lock using the specified object for syncronization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.WaitForExclusive(System.Int32,System.Int32)">
            <summary>
            This is the only real work to be done, once we've acquired the write lock
            we have to wait for all readers to complete.  If/when that happens we can
            then own the write lock.  The case where this does not take place is when
            a thread that already owns the lock calls us to lock again.  In this case
            we can just return success and ignore the outstanding read requests.  The
            major problem with this approach is that if function A() does a read-lock
            and calls function B() which does a write lock, this will fail.  So the
            solution is to either use the upgradeable version (see the derived class 
            UpgradableReadWriteLocking) and upgrade, or to start with a write lock in
            function A().
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.WriterOnlyLocking">
            <summary>
            provides a writer-only lock around Monitor.  The TryRead/ReleaseRead methods are no-ops and
            always return true.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.WriterOnlyLocking._writeVersion">
            <summary> The writer version </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.WriterOnlyLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.WriteLock">
            <summary>
            Allows a write lock to be disposed
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.Acquire(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires the lock within the timeout or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Boolean)">
            <summary> Tracks an existing read lock on a resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires a read lock on the resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.Dispose">
            <summary> Unlocks the resource </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.WriteLock.HasWriteLock">
            <summary>
            Returns true if write access is locked
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.IWorkQueue`1">
            <summary> Provides an interface for a simple WorkQueue </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.IWorkQueue`1.Complete(System.Boolean,System.Int32)">
            <summary>Waits for all queued tasks to complete and then exists all threads</summary>
            <returns>Returns true if all pending tasks were completed before the timeout expired.</returns>
        </member>
        <member name="M:CSharpTest.Net.Threading.IWorkQueue`1.Enqueue(`0)">
            <summary> Enqueues a task </summary>
        </member>
        <member name="E:CSharpTest.Net.Threading.IWorkQueue`1.OnError">
            <summary> Raised when a task fails to handle an error </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.MutexLock">
            <summary>
            Creates a lock on a mutex that can be released via the Dispose() method, for use in a using statement
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.String)">
            <summary> Creates and locks the named mutex </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.String,System.Object[])">
            <summary> Creates and locks the named mutex </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.Int32,System.String,System.Object[])">
            <summary> Creates and locks the named mutex or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"> Raises System.TimeoutException if mutex was not obtained. </exception>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.Int32,System.String)">
            <summary> Creates and locks the named mutex or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"> Raises System.TimeoutException if mutex was not obtained. </exception>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.Threading.Mutex)">
            <summary> Locks the provided mutex </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.#ctor(System.Int32,System.Threading.Mutex)">
            <summary> Locks the provided mutex or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"> Raises System.TimeoutException if mutex was not obtained. </exception>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.MutexLock.Dispose">
            <summary> Releases the lock on the mutex, and if created by this closes the mutex </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.MutexLock.MutexHandle">
            <summary> Returns the mutex </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.MutexLock.IsLocked">
            <summary> Returns true if this object holds a lock on the mutex </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.MutexLock.WasNew">
            <summary> Returns true if this object created a new named mutex </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.MutexLock.WasAbandonded">
            <summary> Returns true if the lock was obtained from an abandoned mutex </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.UsageCounter">
            <summary>
            Provides a counter that fires a delegate on first usage and last release.  For the counts
            to be maintained someone must hold an instance of one or more of these objects.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.#ctor(System.String,System.Object[])">
            <summary> Creates a composite name with the format and arguments specified </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.#ctor(System.String)">
            <summary> The name used for the global object </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Dispose">
            <summary> Releases the resources but does not decrement counts </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.TotalCount(System.Action{System.Int32})">
            <summary> Calls the provided delegate inside lock with the current count value </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment">
            <summary> Increments the counter by one </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment``1(System.Action{``0},``0)">
            <summary> Delegate fired inside lock if this is the first Increment() call on the name provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Increment(System.Threading.ThreadStart)">
            <summary> Delegate fired inside lock if this is the first Increment() call on the name provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement">
            <summary> Decrements the counter by one </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement``1(System.Action{``0},``0)">
            <summary> Delegate fired inside lock if the Decrement() count reaches zero </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.UsageCounter.Decrement(System.Threading.ThreadStart)">
            <summary> Delegate fired inside lock if the Decrement() count reaches zero </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.UsageCounter.Name">
            <summary> Returns the name specified when this instance was created </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.UsageCounter.InstanceCount">
            <summary> Returns the number of times Increment() has been called on this instance </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.WaitAndContinueList">
            <summary>
            Represents a set of queued IWorkAndContinue items that can be processed
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.#ctor">
            <summary> Constructs an empty WaitAndContinueList </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.Dispose">
            <summary> Disposes of the list and all it's contents </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.AddWork(CSharpTest.Net.Threading.IWaitAndContinue)">
            <summary> Adds a unit of work to the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.AddWork(CSharpTest.Net.Threading.WaitAndContinueList)">
            <summary> Moves the work in the other list into this list </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.PerformWork(System.Int32)">
            <summary>
            Returns true if a unit of work was processed within the timeout, or false if
            the timeout expired prior to a unit of work completion.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueList.PerformWork(System.Int32,CSharpTest.Net.Threading.IWaitAndContinue@)">
            <summary>
            Returns true if a unit of work was processed within the timeout, or false if
            the timeout expired prior to a unit of work completion.  itemProcessed will
            be set to the instance of the item process when the result is true.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.WaitAndContinueList.Count">
            <summary> Returns the number of work queue items </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.WaitAndContinueList.IsEmpty">
            <summary> Returns true if the work queue is empty </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.WaitAndContinueWorker">
            <summary>
            Represents a single worker thread that processes IWaitAndContinue work items
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.#ctor">
            <summary> Constructs a thread to process IWaitAndContinue work items </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.AddWork(CSharpTest.Net.Threading.IWaitAndContinue)">
            <summary> Adds a unit of work to the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.AddWork(CSharpTest.Net.Threading.WaitAndContinueList)">
            <summary> Adds a unit of work to the list </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.Complete(System.Boolean,System.Int32)">
            <summary>
            Exits the worker thread and, if complete is true, waits for the remaining 
            tasks to complete
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.Abort">
            <summary>
            Terminates all work by aborting the worker thread even if work is in progress
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WaitAndContinueWorker.Dispose">
            <summary> Disposes of the worker thread and all pending work </summary>
        </member>
        <member name="E:CSharpTest.Net.Threading.WaitAndContinueWorker.OnError">
            <summary> Raised when an uncaught exception is thrown while processing the work queue </summary>
        </member>
        <member name="P:CSharpTest.Net.Threading.WaitAndContinueWorker.IsEmpty">
            <summary> Returns true if the work queue is empty </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.WorkQueue">
            <summary>
            An extremely basic WorkQueue using a fixed number of threads to execute Action() or Action&lt;T> delegates
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Threading.WorkQueue`1">
            <summary>
            An extremely basic WorkQueue using a fixed number of threads to execute Action&lt;T> 
            over the enqueued instances of type T, aggregates an instance of WorkQueue()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue`1.#ctor(System.Action{`0},System.Int32)">
            <summary>
            Constructs the Work Queue with the specified number of threads.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue`1.System#IDisposable#Dispose">
            <summary>Immediatly stops processing tasks and exits all worker threads</summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue`1.Complete(System.Boolean,System.Int32)">
            <summary>
            Waits for all executing tasks to complete and then exists all threads, If completePending
            is false no more tasks will begin, if true threads will continue to pick up tasks and
            run until the queue is empty.  The timeout period is used to join each thread in turn, 
            if the timeout expires that thread will be aborted.
            </summary>
            <param name="completePending">True to complete enqueued activities</param>
            <param name="timeout">The timeout to wait for a thread before Abort() is called</param>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue`1.Enqueue(`0)">
            <summary> Enqueues a task </summary>
        </member>
        <member name="E:CSharpTest.Net.Threading.WorkQueue`1.OnError">
            <summary> Raised when a task fails to handle an error </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue.#ctor(System.Int32)">
            <summary>
            Constructs the Work Queue with the specified number of threads.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Threading.WorkQueue.Enqueue``1(System.Action{``0},``0)">
            <summary> Enqueues a task with a parameter of type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Constants">
            <summary>
            This class name is actually wrong... These values are only constant for the life the current
            app domain ;)
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.UNKNOWN">
            <summary> Returns the string '[Unknown]'</summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessId">
            <summary> Returns the current process id </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessName">
            <summary> Returns the current process name without an extension </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProcessFile">
            <summary> Returns the file path to the exe for this process </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.AppDomainName">
            <summary> Returns the current AppDomain's friendly name </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.EntryAssembly">
            <summary> Returns the entry-point assembly or the highest stack assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProductVersion">
            <summary> Returns the product version of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ProductName">
            <summary> Returns the product name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.CompanyName">
            <summary> Returns the company name of the entry assembly </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.IsUnitTest">
            <summary> Returns true if the current process is running a unit test </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.IsDebugging">
            <summary> Returns true if a debugger is attached to the process </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.RegistrySoftwarePath">
            <summary>
            Returns the HKCU or HKLM path for this software application based
            on the process that is running: Software\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.ApplicationData">
            <summary>
            Returns the roaming user profile path for the currently running software
            application: {SpecialFolder.ApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.LocalApplicationData">
            <summary>
            Returns the non-roaming user profile path for the currently running software
            application: {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Constants.DefaultLogFile">
            <summary>
            Returns a default log file name derived as:
            {SpecialFolder.LocalApplicationData}\{CompanyName}\{ProductName}\{AppDomainName}.txt
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Constants.#cctor">
            <summary>
            This is some ugly code, the intent is to be able to answer the above questions in 
            a wide array of environments.  I admit now this will fail eventually.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.FileUtils">
            <summary>
            Provides utilities related to files and file paths
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.IsValidExtension(System.String)">
            <summary>
            Returns true if the extension provided contains only one '.' at the beginning
            of the string and does not contain any path or invalid filename characters.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.IsValidFileName(System.String)">
            <summary>
            Returns true if the name provided contains only valid filename characters
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeValidFileName(System.String)">
            <summary>
            Creates a valid filename by removing all invalid characters.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeValidFileName(System.String,System.String)">
            <summary>
            Creates a valid filename by replacing all invalid characters with the string provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.FindFullPath(System.String)">
            <summary>
            Returns the fully qualified path to the file if it is fully-qualified, exists in the current directory, or 
            in the environment path, otherwise generates a FileNotFoundException exception.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.ExpandEnvironment(System.String)">
            <summary>
            Expands environment variables into text, i.e. %SystemRoot%, or %ProgramFiles%
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.TrySearchPath(System.String,System.String@)">
            <summary>
            Returns true if the file is fully-qualified, exists in the current directory, or in the environment path, 
            otherwise generates a FileNotFoundException exception.  Will not propagate errors.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.MakeRelativePath(System.String,System.String)">
            <summary>
            For this to work for a directory the argument should end with a '\' character
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GrantFullControlForFile(System.String,System.Security.Principal.WellKnownSidType)">
            <summary> Grants the user FullControl for the file, returns true if modified, false if already present </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GrantFullControlForFile(System.String,System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)">
            <summary> Grants the user FullControl for the file, returns true if modified, false if already present </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.GetPermissions(System.String,System.Security.Principal.WellKnownSidType)">
            <summary> Returns the rights assigned to the given SID for this file's ACL </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.FileUtils.ReplacePermissions(System.String,System.Security.Principal.WellKnownSidType,System.Security.AccessControl.FileSystemRights)">
            <summary> Removes any existing access for the user SID supplied and adds the specified rights </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ObjectKeepAlive">
            <summary>
            Provides a means of forcing the garbage collector to wait on objects aquired from permanent 
            storage while only holding WeakReference's of the object.  Essentially uses a simple lockless 
            algorithm to track the most recently loaded objects so that they will stay alive longer.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.#ctor(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Configures the keep-alive policy for this container
            </summary>
            <param name="minItems">The minimum number of items desired in the list (kept event after age expires)</param>
            <param name="maxItems">The maximum number of items desired in the list (discarded even if age has not expired)</param>
            <param name="maxAge">Determines how long to keep an object if the count is between min and max</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.#ctor(System.Int32,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Configures the keep-alive policy for this container
            </summary>
            <param name="minItems">The minimum number of items desired in the list (kept event after age expires)</param>
            <param name="maxItems">The maximum number of items desired in the list (discarded even if age has not expired)</param>
            <param name="maxAge">Determines how long to keep an object if the count is between min and max</param>
            <param name="externalTicks">True if you want to perform cleanup exclusivly on another thread by calling Tick(), otherwise false</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Clear">
            <summary>
            Clears the entire keep-alive cache
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Tick">
            <summary>
            Can be called periodically by external threads to ensure cleanup instead of depending upon calls to Add()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Add(System.Object)">
            <summary>
            Cleans up expired items and adds the object to the list of items to keep alive.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.RegexPatterns">
            <summary>
            A collection of common regular expression patterns
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FullVersion">
            <summary>
            Matches a numeric version "1.2.3.4" up to 9 digits for a value
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.Version">
            <summary>
            Matches a numeric version with 2, 3, or 4 parts: "1.2", "1.2.3", or "1.2.3.4" up to 9 digits for a value
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.HttpUrl">
            <summary>
            Free-form matching of urls in plain text, from http://immike.net/blog/2007/04/06/5-regular-expressions-every-web-programmer-should-know/
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.HtmlEntity">
            <summary>
            Finds html/xml entity references in text, test patterns: hex = #xae6f278 decimal = #1234567890 or named = lt
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.MakefileMacro">
            <summary>
            Matches a makefile macro name in text, i.e. "$(field:name=value)" where field is any alpha-numeric + ('_', '-', or '.') text identifier 
            returned from group "field".  the "replace" group contains all after the identifier and before the last ')'.  "name" and "value" groups
            match the name/value replacement pairs.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FormatSpecifier">
            <summary>
            Matches a c-sharp style format specifier in a string "{0,5:n}". The identifier may be any numeric set of characters.  The groups 
            returned will be "field", "suffix", "width", and "format".  Used with StringUtils.Transform() you can provide your own String.Format().
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.FormatNameSpecifier">
            <summary>
            Matches a c-sharp style format specifier in a string "{Name-0,5:n}" with some additional changes. Used with StringUtils.Transform() you 
            can provide your own String.Format().  The groups returned will be the following:
            "field" - An identifier may contain any alpha-numeric or one of these special characters: ('_', '-', or '.')
            "suffix" - Everything after the identifer and before the closing brace '}'
            "width" - The width part of the format is a number after a ',' and before ':'
            "format" - Everything after the the ':' and before the closing '}', note: escapes }} are not supported.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.VSErrorMessage">
            <summary>
            Matches VisualStudio style error/warning format.  The groups returned are as follows:
            path = The file path (due caution should be taken to ensure this is a file path)
            line = The line number if any
            pos = The line position if any
            error = Was it tagged as an error?
            warning = Was it tagged as a warning?
            id = The error/warning id if provided
            message = The remainder of the text line
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.Guid">
            <summary>
            Matches a guid in the common forms used with the string constructor
            of the System.Guid type:
             "ca761232ed4211cebacd00aa0057b223" 
             "ca761232-ed42-11ce-bacd-00aa0057b223" 
             "CA761232-ED42-11CE-BACD-00AA0057B223" 
            "{ca761232-ed42-11ce-bacd-00aa0057b223}" 
            "(CA761232-ED42-11CE-BACD-00AA0057B223)" 
            The following format is NOT support:
            "{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2, 0x23}}" 
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Utils.RegexPatterns.CreditCard">
            <summary>
            This is generally not enought to fully validate a card, there are other
            ways to validate by using the build-in checksums.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.ReplaceFile">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.  Use the
            TransactFile if you MUST be certain to succeed then Commit(), otherwise this implementation
            provides a 'good-enough' transaction and is optimized for larger files.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.CreateDerivedFile(System.String,System.String@)">
            <summary>
            Derives a new filename that doesn't exist from the provided name, ie. file.txt becomes file.txt.~0001
            </summary>
            <param name="originalPath">the name of the file</param>
            <param name="tempfilePath">[out] the temp file name</param>
            <returns>A stream with exclusive write access to the file</returns>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.#ctor(System.String)">
            <summary>
            Creates a temp file based on the given file being replaced and when a call to Commit() is 
            made the target file is replaced with the current contents of the temporary file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.#ctor(System.String,System.String)">
            <summary>
            Creates a backup of the target file when replacing using the extension provided
            </summary>
            <param name="targetName">The name of the file to replace</param>
            <param name="backupExtension">A valid file extension beginning with '.'</param>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.Commit">
            <summary>
            Commits the replace operation on the file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.Rollback">
            <summary> 
            Aborts the operation and reverts pending changes 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.ReplaceFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the open stream and the temporary file.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.ReplaceFile.TargetFile">
            <summary>
            Returns the originally provided filename that is being replaced
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringConverter">
            <summary>
            Handles the conversion of data to and from strings for serialization.  Can
            alternatly be configured to provide other transforms for display or other
            outputs.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.#ctor">
            <summary>
            Constructs a default StringConverter object for serialization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.#ctor(System.Boolean)">
            <summary>
            Constructs a StringConverter optionally populated with the default
            serialization transforms.
            </summary>
            <param name="includeDefaults">true to include default transforms</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.Add``1(CSharpTest.Net.Utils.StringConverter.TryParseMethod{``0},System.Converter{``0,System.String})">
            <summary>
            Adds a converter for the type TYPE that can transform the TYPE to and from a string
            </summary>
            <typeparam name="TYPE">The type that can be transformed by the delegates</typeparam>
            <param name="tryParse">A delegate method to convert from a string</param>
            <param name="toString">A delegate method to convert to a string</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.Remove``1">
            <summary>
            Removes the TYPE from the set of types allowed to be converted to and from strings.
            </summary>
            <typeparam name="TYPE">The type that will no longer be transformed</typeparam>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.ToString(System.Object)">
            <summary>
            Converts an object to a string if the type is registered, or ArgumentOutOfRangeException
            is thrown if no transform is registered for that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.ToString``1(``0)">
            <summary>
            Converts the value of TYPE to a string if the type is registered, or ArgumentOutOfRangeException
            is thrown if no transform is registered for that type.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.FromString``1(System.String)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            Throws an ArgumentException if the string can not be converted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            </summary>
            <param name="input">The string value to convert</param>
            <param name="type">The type of the value to be converted to</param>
            <param name="value">The value once converted</param>
            <returns>True if it was able to make the conversion</returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringConverter.TryParse``1(System.String,``0@)">
            <summary>
            Converts the provided string to a value of TYPE if the type is registered, 
            or raises ArgumentOutOfRangeException if no transform is registered for that type.
            </summary>
            <typeparam name="TYPE">The type of the value to be converted to</typeparam>
            <param name="input">The string value to convert</param>
            <param name="value">The value once converted</param>
            <returns>True if it was able to make the conversion</returns>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringConverter.TryParseMethod`1">
            <summary>
            The delegate type used to try and parse a string
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.StringUtils">
            <summary>
            Various routines for string manipulations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.AlphaNumericOnly(System.String)">
            <summary>
            returns a new string containing only the alpha-numeric characters in the original
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.SafeFileName(System.String)">
            <summary>
            Parses the text to ensure that it is a valid file name and returns the resulting 
            string with the following offending characters replace with '-': /\:*?"'&lt;>|
            Also removes any characters class as control characters, or anything below 32 space,
            this would include tab, backspace, newline, linefeed, etc.
            If provided null, this function returns null
            </summary>
            <param name="name">The text to parse</param>
            <returns>The text provided with only allowable characters</returns>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.SafeFilePath(System.String)">
            <summary>
            Splits the string on path characters ('/' and '\\') and passes each
            to SafeFileName(), then reconstructs the string using '\\' and
            removing any empty segments. 
            If provided null, this function returns null, provided an empty
            string or just a path seperator '/' it will return String.Empty
            </summary>
            <param name="path">The text to parse</param>
            <returns>The text provided as a valid path</returns>
        </member>
        <member name="F:CSharpTest.Net.Utils.StringUtils.DefaultConverter">
            <summary>
            DO NOT EXPOSE THIS PRIVATE MEMEBER... Since the behavior of this can be changed this could have
            adverse effects in unrelated code.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.ToString``1(``0)">
            <summary>
            Converts primitives to strings so that they can be reconstituted via TryParse
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.ToString(System.Object)">
            <summary>
            Converts primitives to strings so that they can be reconstituted via TryParse
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.TryParse``1(System.String,``0@)">
            <summary>
            Reconstructs a type from a string that was previously obtained via StringUtils.ToString(T data)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Reconstructs a type from a string that was previously obtained via StringUtils.ToString(T data)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.StringUtils.Transform(System.String,System.Text.RegularExpressions.Regex,System.Converter{System.Text.RegularExpressions.Match,System.String})">
            <summary>
            Used for text-template transformation where a regex match is replaced in the input string.
            </summary>
            <param name="input">The text to perform the replacement upon</param>
            <param name="pattern">The regex used to perform the match</param>
            <param name="fnReplace">A delegate that selects the appropriate replacement text</param>
            <returns>The newly formed text after all replacements are made</returns>
        </member>
        <member name="T:CSharpTest.Net.Utils.WeakReference`1">
            <summary>
            A strong-typed derivation of the WeakReference class
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.#ctor(`0)">
            <summary> Creates a new WeakReference that keeps track of target. </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary />
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.TryGetTarget(`0@)">
            <summary> Returns true if the Object was retrieved. </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.WeakReference`1.IsAlive">
            <summary>
            Gets an indication whether the object referenced by the current object has been garbage collected.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.WeakReference`1.Target">
            <summary> Gets or sets the Object stored in the handle if it's accessible. </summary>
        </member>
        <member name="T:CSharpTest.Net.WinForms.Win32Window">
            <summary>
            Provides a Windows.Forms implementation of the IWin32Window inteface for windows owned by
            a non-.Net window handle.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.WinForms.Win32Window.FromHandle(System.IntPtr)">
            <summary> Constructs an IWin32Window from a valid handle or returns null if handle == IntPtr.Zero </summary>
        </member>
    </members>
</doc>
